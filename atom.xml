<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason&#39;s Blog</title>
  
  <subtitle>佳宸学习和分享笔记的地方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-02T12:39:13.123Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>吴佳宸</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿里云部署新手教程（一）（购买服务器，免密登陆）</title>
    <link href="http://yoursite.com/2021/05/08/%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2021/05/08/%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-05-08T10:26:41.025Z</published>
    <updated>2020-01-02T12:39:13.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阿里云部署项目新手教程（一）"><a href="#阿里云部署项目新手教程（一）" class="headerlink" title="阿里云部署项目新手教程（一）"></a>阿里云部署项目新手教程（一）</h1><h2 id="（购买服务器，免密登陆）"><a href="#（购买服务器，免密登陆）" class="headerlink" title="（购买服务器，免密登陆）"></a>（购买服务器，免密登陆）</h2><h3 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h3><p>阿里云有学生优惠10元一个月，我选择的是轻量应用服务器，有ssd内存，更高的带宽，但是限量1000G应该够用。选择系统镜像CentOS操作系统。</p><a id="more"></a><p>轻量应用服务器操作起来更简单。</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572003725828.png" alt="1572003725828"></p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572004461160.png" alt="1572004461160"></p><h3 id="如何远程连接"><a href="#如何远程连接" class="headerlink" title="如何远程连接"></a>如何远程连接</h3><p>打开cmd终端输入<code>ssh root@0.0.0.0</code>root表示根用户名@后面接公网IP地址</p><p>连上来了</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572004847359.png" alt="1572004847359"></p><h3 id="保存ssh公钥免密登陆"><a href="#保存ssh公钥免密登陆" class="headerlink" title="保存ssh公钥免密登陆"></a>保存ssh公钥免密登陆</h3><p>终端 在~目录下 cd .ssh 进去.ssh文件夹，输入，没有ssh文件夹 创建 <code>md .ssh</code> bash<code>mkdir</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "myemail@myemail.com"</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter file in which to save the key (/home/Administrator/.ssh/id_rsa): C:\Users\Administrator\.ssh\id_rsa</span><br></pre></td></tr></table></figure><p>然后它会要你填写地址，dos得自己填，要不然会报错，因为unix命令都是相反的斜杠，成功之后生成了公钥私钥文件</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572008937745.png" alt="1572008937745"></p><p><strong>然后改回bash终端写命令，dos cmd 太不兼容了😥，全是坑，用git bash，ubantu bash 都可</strong></p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572009417347.png" alt="1572009417347"></p><p><code>scp id_rsa.pub root@0.0.0.0:.</code></p><p>解释：复制 这个公钥 到你服务器root用户下的（默认文件夹下<code>:.</code>）</p><p>登陆服务器检查一下，文件已经过来了</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572009688607.png" alt="1572009688607"></p><p><code># cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code>把公钥文件追加进来</p><p><code>vim</code>打开这个文件确认一下</p><p>然后重启一下<code># systemctl restart sshd</code></p><p>回到本地，删了公钥<code>$ rm id_rsa.pub</code></p><p>新建配置文件</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572010250446.png" alt="1572010250446"></p><p><code>$ code config</code>vscode 打开config,配置</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572010927402.png" alt="1572010927402"></p><p><code>ssh 用户名</code>免密登陆成功😎</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572010957144.png" alt="1572010957144"></p><h3 id="git-push-到github-ssh-免密推送"><a href="#git-push-到github-ssh-免密推送" class="headerlink" title="git push 到github ssh 免密推送"></a>git push 到github ssh 免密推送</h3><p>把之前的公钥写进来</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572015770953.png" alt="1572015770953"></p><p>把https推送修改成ssh推送</p><p><code>git remote set-url origin +ssh链接</code></p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572015579162.png" alt="1572015579162"></p><p>免密推送成功😎</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572015804042.png" alt="1572015804042"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;阿里云部署项目新手教程（一）&quot;&gt;&lt;a href=&quot;#阿里云部署项目新手教程（一）&quot; class=&quot;headerlink&quot; title=&quot;阿里云部署项目新手教程（一）&quot;&gt;&lt;/a&gt;阿里云部署项目新手教程（一）&lt;/h1&gt;&lt;h2 id=&quot;（购买服务器，免密登陆）&quot;&gt;&lt;a href=&quot;#（购买服务器，免密登陆）&quot; class=&quot;headerlink&quot; title=&quot;（购买服务器，免密登陆）&quot;&gt;&lt;/a&gt;（购买服务器，免密登陆）&lt;/h2&gt;&lt;h3 id=&quot;购买服务器&quot;&gt;&lt;a href=&quot;#购买服务器&quot; class=&quot;headerlink&quot; title=&quot;购买服务器&quot;&gt;&lt;/a&gt;购买服务器&lt;/h3&gt;&lt;p&gt;阿里云有学生优惠10元一个月，我选择的是轻量应用服务器，有ssd内存，更高的带宽，但是限量1000G应该够用。选择系统镜像CentOS操作系统。&lt;/p&gt;
    
    </summary>
    
    
      <category term="服务器部署" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="部署，服务器" scheme="http://yoursite.com/tags/%E9%83%A8%E7%BD%B2%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>防抖节流手写</title>
    <link href="http://yoursite.com/2021/05/08/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/"/>
    <id>http://yoursite.com/2021/05/08/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</id>
    <published>2021-05-08T10:26:41.023Z</published>
    <updated>2020-03-05T09:15:31.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h1><blockquote><p>这两个应用场景很多，自己手写一下，可以解决服务器压力</p></blockquote><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p><strong>任务频繁触发的情况下，只有任务触发的间隔超过指定间隔的时候，任务才会执行。</strong></p><a id="more"></a><p>场景：用户输入停止一段时间过后再去获取数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>防抖<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"debounce"</span>&gt;</span>防抖按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> myDebounce = <span class="built_in">document</span>.getElementById(<span class="string">'debounce'</span>)</span></span><br><span class="line"><span class="actionscript">      myDebounce.addEventListener(<span class="string">'click'</span>, debounce(sayDebounce, <span class="number">1000</span>))</span></span><br><span class="line">    </span><br><span class="line">      /**</span><br><span class="line">       * 防抖功能函数</span><br><span class="line">       * fn 要防抖的功能函数</span><br><span class="line">       * delay 延迟多久，毫秒</span><br><span class="line">       **/</span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">debounce</span> <span class="params">(fn, delay, immediate)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 通过闭包，创建一个标记用来存放定时器的返回值</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> timeout = <span class="literal">null</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 触发事件回调时执行这个 teturn function</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// 每次当用户点击/输入的时候，把前一个定时器清除</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span>(timeout) clearTimeout(timeout)</span></span><br><span class="line">           </span><br><span class="line"><span class="actionscript">          <span class="comment">// immediate true 首次触发执行</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span>(immediate) &#123;</span></span><br><span class="line"><span class="actionscript">              immediate = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">              fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span></span><br><span class="line">          &#125;</span><br><span class="line">            </span><br><span class="line"><span class="actionscript">          <span class="comment">// 创建一个新的 setTimeout，</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 这样就能保证点击按钮后的间隔内,如果用户还点击了的话，就不会执行 fn 函数</span></span></span><br><span class="line"><span class="javascript">          timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 以防需要防抖的事件this指向被改变 绑定一下this指向</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 需要防抖的事件 形参 用argument 绑进来</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 定时器结束后传入 fn函数 </span></span></span><br><span class="line"><span class="javascript">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span></span><br><span class="line">          &#125;, delay)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 需要防抖的事件</span></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">sayDebounce</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'防抖成功！'</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p><strong>减少一段时间内触发的频率。</strong></p><ul><li>方法一：设置flag 执行前flag flase 在定时器内节流时间执行后 设回 true</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>节流<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"throttle"</span>&gt;</span>点击节流<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> myThrottle = <span class="built_in">document</span>.getElementById(<span class="string">'throttle'</span>)</span></span><br><span class="line"><span class="actionscript">      myThrottle.addEventListener(<span class="string">'click'</span>, throttle(sayThrottle, <span class="number">1000</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 节流函数体</span></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">throttle</span> <span class="params">(fn, delay)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 通过闭包保存一个标记</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> flag = <span class="literal">true</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// flag为false 说明还在节流时间中 退出函数</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (!flag) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span></span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 将 flag 设置为 false，防止执行之前再被执行</span></span></span><br><span class="line"><span class="actionscript">          flag = <span class="literal">false</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 定时器</span></span></span><br><span class="line"><span class="javascript">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 执行完事件（比如调用完接口）之后，重新将这个标志设置为 true</span></span></span><br><span class="line"><span class="actionscript">            flag = <span class="literal">true</span></span></span><br><span class="line">          &#125;, delay)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 需要节流的事件</span></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">sayThrottle</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'节流成功！'</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>方法二：时间戳来判断是否已到执行时间。与上次函数执行的时间比较，大于节流时间就放行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn 是需要执行的函数</span></span><br><span class="line"><span class="comment">// wait 是时间间隔</span></span><br><span class="line"><span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, wait</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用闭包保存，上一次执行 fn 的时间 </span></span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 将 throttle 处理结果当作函数返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间，转换成时间戳，单位毫秒</span></span><br><span class="line">        <span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        <span class="comment">// 将当前时间和上一次执行函数的时间进行对比</span></span><br><span class="line">        <span class="comment">// 大于等待时间就把 previous 设置为当前时间并执行函数 fn</span></span><br><span class="line">        <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">            previous = now</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="防抖加节流"><a href="#防抖加节流" class="headerlink" title="防抖加节流"></a>防抖加节流</h3><p>节流里面包防抖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn 是需要节流处理的函数</span></span><br><span class="line"><span class="comment">// wait 是时间间隔</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// previous 是上一次执行 fn 的时间</span></span><br><span class="line">  <span class="comment">// timer 是定时器</span></span><br><span class="line">  <span class="keyword">let</span> previous = <span class="number">0</span>, timer = <span class="literal">null</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 将 throttle 处理结果当作函数返回</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前时间，转换成时间戳，单位毫秒</span></span><br><span class="line">    <span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ------ 新增部分 start ------ </span></span><br><span class="line">    <span class="comment">// 判断上次触发的时间和本次触发的时间差是否小于时间间隔</span></span><br><span class="line">    <span class="keyword">if</span> (now - previous &lt; wait) &#123;</span><br><span class="line">     <span class="comment">// 如果小于，则为本次触发操作设立一个新的定时器</span></span><br><span class="line">       <span class="comment">// 定时器时间结束后执行函数 fn </span></span><br><span class="line">       <span class="keyword">if</span> (timer) clearTimeout(timer)</span><br><span class="line">       timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          previous = now</span><br><span class="line">        fn.apply(<span class="keyword">this</span>, args)</span><br><span class="line">        &#125;, wait)</span><br><span class="line">    <span class="comment">// ------ 新增部分 end ------ </span></span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// 第一次执行</span></span><br><span class="line">       <span class="comment">// 或者时间间隔超出了设定的时间间隔，执行函数 fn</span></span><br><span class="line">       previous = now</span><br><span class="line">       fn.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DEMO</span></span><br><span class="line"><span class="comment">// 执行 throttle 函数返回新函数</span></span><br><span class="line"><span class="keyword">const</span> betterFn = throttle(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'fn 节流执行了'</span>), <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// 第一次触发 scroll 执行一次 fn，每隔 1 秒后执行一次函数 fn，停止滑动 1 秒后再执行函数 fn</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'scroll'</span>, betterFn)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;防抖节流&quot;&gt;&lt;a href=&quot;#防抖节流&quot; class=&quot;headerlink&quot; title=&quot;防抖节流&quot;&gt;&lt;/a&gt;防抖节流&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;这两个应用场景很多，自己手写一下，可以解决服务器压力&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;防抖&quot;&gt;&lt;a href=&quot;#防抖&quot; class=&quot;headerlink&quot; title=&quot;防抖&quot;&gt;&lt;/a&gt;防抖&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;任务频繁触发的情况下，只有任务触发的间隔超过指定间隔的时候，任务才会执行。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>设计问题，数学 leetcode</title>
    <link href="http://yoursite.com/2021/05/08/%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98-leetcode/"/>
    <id>http://yoursite.com/2021/05/08/%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98-leetcode/</id>
    <published>2021-05-08T10:26:41.022Z</published>
    <updated>2021-03-07T00:43:46.338Z</updated>
    
    <content type="html"><![CDATA[<h3 id="随机数组"><a href="#随机数组" class="headerlink" title="随机数组"></a>随机数组</h3><h4 id="Shuffle-an-Array"><a href="#Shuffle-an-Array" class="headerlink" title="Shuffle an Array"></a>Shuffle an Array</h4><p>打乱一个没有重复元素的数组。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 以数字集合 1, 2 和 3 初始化数组。</span><br><span class="line">int[] nums = &#123;1,2,3&#125;;</span><br><span class="line">Solution solution = new Solution(nums);</span><br><span class="line"></span><br><span class="line">// 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。</span><br><span class="line">solution.shuffle();</span><br><span class="line"></span><br><span class="line">// 重设数组到它的初始状态[1,2,3]。</span><br><span class="line">solution.reset();</span><br><span class="line"></span><br><span class="line">// 随机返回数组[1,2,3]打乱后的结果。</span><br><span class="line">solution.shuffle();</span><br></pre></td></tr></table></figure><a id="more"></a><p>解答：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Solution = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.nums = nums</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Resets the array to its original configuration and return it.</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Solution.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.nums</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a random shuffling of the array.</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Solution.prototype.shuffle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 并不是真正随机,sort小于10个是插入排序，大于是快速排序</span></span><br><span class="line">    <span class="comment">// nums.sort(()=&gt;Math.random() - 0.5)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 扩展运算符 深拷贝 ，直接赋值是赋引用地址，会把原数组改变</span></span><br><span class="line">    <span class="keyword">let</span> arr = [...this.nums]</span><br><span class="line">    <span class="keyword">let</span> len = <span class="keyword">this</span>.nums.length</span><br><span class="line">    <span class="keyword">let</span> j ,x</span><br><span class="line">    <span class="comment">// 取得随机位置，与当前位置交换</span></span><br><span class="line">    <span class="keyword">while</span>(len) &#123;</span><br><span class="line">        j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (len--))</span><br><span class="line">        <span class="comment">// [arr[i], arr[random]] = [arr[random], arr[i]]  </span></span><br><span class="line">        <span class="comment">// 结构赋值leetcode用不了有点奇怪</span></span><br><span class="line">        t = arr[len]</span><br><span class="line">        arr[len] = arr[j]</span><br><span class="line">        arr[j] = t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new Solution(nums)</span></span><br><span class="line"><span class="comment"> * var param_1 = obj.reset()</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.shuffle()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr><h3 id="Fizz-Buzz"><a href="#Fizz-Buzz" class="headerlink" title="Fizz Buzz"></a>Fizz Buzz</h3><p>写一个程序，输出从 1 到 <em>n</em> 数字的字符串表示。</p><ol><li><p>如果 <em>n</em> 是3的倍数，输出“Fizz”；</p></li><li><p>如果 <em>n</em> 是5的倍数，输出“Buzz”；</p></li><li><p>如果 <em>n</em> 同时是3和5的倍数，输出 “FizzBuzz”。</p></li></ol><p>解：除余数，然后字符串拼接，如果不是就直接加数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;string[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fizzBuzz = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="string">''</span></span><br><span class="line">        x += i % <span class="number">3</span> ? <span class="string">''</span> : <span class="string">'Fizz'</span></span><br><span class="line">        x += i % <span class="number">5</span> ? <span class="string">''</span> : <span class="string">'Buzz'</span></span><br><span class="line">        <span class="keyword">if</span>(!x) &#123;</span><br><span class="line">            x += i</span><br><span class="line">        &#125;</span><br><span class="line">        str.push(x)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="计数质数"><a href="#计数质数" class="headerlink" title="计数质数"></a>计数质数</h3><p>统计所有小于非负整数 <em>n</em> 的质数的数量。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: 4</span><br><span class="line">解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</span><br></pre></td></tr></table></figure><p>解：厄拉多塞筛法，把当前循环数的倍数全都标记，没有标记的就是质数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countPrimes = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>,</span><br><span class="line">        arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!arr[i]) &#123;</span><br><span class="line">            count++</span><br><span class="line">            <span class="comment">// 从两倍开始</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j = i * <span class="number">2</span>; j &lt; n; j += i) &#123;</span><br><span class="line">                arr[j] = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="3的幂"><a href="#3的幂" class="headerlink" title="3的幂"></a>3的幂</h3><p>给定一个整数，写一个函数来判断它是否是 3 的幂次方。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 27</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 0</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 9</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 45</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>进阶：</strong><br>你能不使用循环或者递归来完成本题吗？</p><p>解：可以使用3进制转换</p><ul><li>n = 1 时 ==&gt; 转3进制数为 1</li><li>n = 3 时 ==&gt; 转3进制数为 10</li><li>n = 9 时 ==&gt; 转3进制数为 100</li><li>n = 27 时 ==&gt; 转3进制数为 1000</li></ul><p>得出结论，3的幂次方的3进制都是1开头的，后面都是0</p><p>进制转换：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toString" target="_blank" rel="noopener">Number.prototype.toString()</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPowerOfThree = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 匹配1开头的 0有0个或以上 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^10*$/</span>.test(n.toString(<span class="number">3</span>))</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h3><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。</li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;III&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;IV&quot;</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p>解：先把罗马对应的数值存map，然后与后一个比较，如果小于后一个就是减，大于就是加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> romanToInt = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> romaMap = &#123;</span><br><span class="line">        <span class="string">"I"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"V"</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">"X"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">"L"</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="string">"C"</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">"D"</span>: <span class="number">500</span>,</span><br><span class="line">        <span class="string">"M"</span>: <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        romaMap[s[i]] &lt; romaMap[s[i+<span class="number">1</span>]] ? sum -= romaMap[s[i]] : sum += romaMap[s[i]]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;随机数组&quot;&gt;&lt;a href=&quot;#随机数组&quot; class=&quot;headerlink&quot; title=&quot;随机数组&quot;&gt;&lt;/a&gt;随机数组&lt;/h3&gt;&lt;h4 id=&quot;Shuffle-an-Array&quot;&gt;&lt;a href=&quot;#Shuffle-an-Array&quot; class=&quot;headerlink&quot; title=&quot;Shuffle an Array&quot;&gt;&lt;/a&gt;Shuffle an Array&lt;/h4&gt;&lt;p&gt;打乱一个没有重复元素的数组。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 以数字集合 1, 2 和 3 初始化数组。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int[] nums = &amp;#123;1,2,3&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Solution solution = new Solution(nums);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;solution.shuffle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 重设数组到它的初始状态[1,2,3]。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;solution.reset();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 随机返回数组[1,2,3]打乱后的结果。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;solution.shuffle();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>网络基础 复习</title>
    <link href="http://yoursite.com/2021/05/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%A4%8D%E4%B9%A0%20180414/"/>
    <id>http://yoursite.com/2021/05/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%A4%8D%E4%B9%A0%20180414/</id>
    <published>2021-05-08T10:26:41.021Z</published>
    <updated>2020-02-28T02:01:32.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h1><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>UDP 协议是<strong>面向无连接</strong>的，正式传递数据之前<strong>不需要先连接</strong>起双方（不可靠性）。不会对数据报文进行任何拆分和拼接操作（高效）。</p><a id="more"></a><p>UDP支持一对多，多对多，多对一的方式。</p><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP 建立连接断开连接都需要先需要进行握手。</p><h4 id="建立连接3次握手"><a href="#建立连接3次握手" class="headerlink" title="建立连接3次握手"></a>建立连接3次握手</h4><p><img src="/images/loading.png" data-original="E:%5CBlog%5Cpicture%5C1631bf1e79b3cd42" alt="img"></p><h4 id="断开连接四次握手"><a href="#断开连接四次握手" class="headerlink" title="断开连接四次握手"></a>断开连接四次握手</h4><p><img src="/images/loading.png" data-original="E:%5CBlog%5Cpicture%5C1631fb807f2c6c1b" alt="img"></p><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><h3 id="get-post-区别"><a href="#get-post-区别" class="headerlink" title="get post 区别"></a>get post 区别</h3><ul><li>Get 请求能缓存，Post 不能</li><li>Post 相对 Get 安全一点，因为Get 请求都包含在 URL 里（当然你想写到 <code>body</code> 里也是可以的），且会被浏览器保存历史纪录。Post 不会，但是在抓包的情况下都是一样的。</li><li>URL有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不是 RFC 规定的</li><li>Post 支持更多的编码类型且不对数据类型限制</li></ul><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><p><strong>2XX 成功</strong></p><ul><li><p>！！200 OK，表示从客户端发来的请求在服务器端被正确处理</p></li><li><p>204 No content，表示请求成功，但响应报文不含实体的主体部分（请求成功但是没有资源返回）</p></li><li><p>205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容</p></li><li><p>206 Partial Content，进行范围请求</p><p><img src="/images/loading.png" data-original="https://user-gold-cdn.xitu.io/2017/12/6/16029efb76d2b65f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片摘取自HTTP图解"></p></li></ul><p><strong>3XX 重定向</strong></p><ul><li><p>！！<strong>301 moved permanently，永久性重定向</strong>，表示资源已被分配了新的 URL</p><p><img src="/images/loading.png" data-original="https://user-gold-cdn.xitu.io/2017/12/6/16029efa6a4ba749?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片摘取自HTTP图解"></p></li><li><p>！！<strong>302 found，临时性重定向</strong>，表示资源临时被分配了新的 URL</p><p><img src="/images/loading.png" data-original="https://user-gold-cdn.xitu.io/2017/12/6/16029efba78b2b7e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片摘取自HTTP图解"></p></li><li><p>303 see other，表示资源存在着另一个 URL，应使用 <strong>GET</strong> 方法获取资源</p><p><img src="/images/loading.png" data-original="https://user-gold-cdn.xitu.io/2017/12/6/16029efbc1b5cfce?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片摘取自HTTP图解"></p></li><li><p>！！<strong>304 not modified</strong>，表示服务器允许访问资源，但因发生请求未满足条件的情况（304 虽 然被划分在 3XX 类别中，但是和重定向没有关系。）</p><p><img src="/images/loading.png" data-original="https://user-gold-cdn.xitu.io/2017/12/6/16029efaa07f726e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片摘取自HTTP图解"></p></li><li><p>307 temporary redirect，临时重定向，和302含义类似，尽管 302 标准禁止 POST 变换成 GET，但实际使用时大家并不遵守。</p><p>307 会遵照浏览器标准，不会从 POST 变成 GET。但是，对于处理响应时的行为，每种浏览器有可能出现不同的情况</p></li></ul><p><strong>4XX 客户端错误</strong></p><ul><li><p>！！400 bad request，请求<strong>报文存在语法错误</strong></p><p><img src="/images/loading.png" data-original="https://user-gold-cdn.xitu.io/2017/12/6/16029efaa064bdb6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片摘取自HTTP图解"></p></li><li><p>！！401 unauthorized，表示发送的请求需要有通过 <strong>HTTP 认证</strong>的认证信息</p><p><img src="/images/loading.png" data-original="https://user-gold-cdn.xitu.io/2017/12/6/16029efacc2e6a4c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片摘取自HTTP图解"></p></li><li><p>！！403 forbidden，表示对请求资源的访问<strong>被服务器拒绝</strong></p></li><li><p>！！404 not found，表示在服务器上<strong>没有找到</strong>请求的<strong>资源</strong></p></li><li><p>405 Method Not Allowed， 客户端请求的方法虽然能被服务器识别，但是服务器禁止使用该方法（GET 和 HEAD 方法，服务器应该总是允许客户端进行访问）</p><blockquote><p>客户端可以通过 OPTIONS 方法来查看服务器允许的访问方法, 如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Access-Control-Allow-Methods: GET,HEAD,PUT,PATCH,POST,DELETE</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul><p><strong>5XX 服务器错误</strong></p><ul><li><p>！！500 internal sever error，表示服务器端在执行请求时发生了错误</p><p><img src="/images/loading.png" data-original="https://user-gold-cdn.xitu.io/2017/12/6/16029efae2420839?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片摘取自HTTP图解"></p></li><li><p>501 Not Implemented，表示服务器不支持当前请求所需要的某个功能</p></li><li><p>502 Bad Gateway，表明扮演网关或代理角色的服务器，从上游服务器中接收到的响应是无效的。（通常不是客户端能够修复的，而是需要由途径的 Web 服务器或者代理服务器对其进行修复）</p></li><li><p>！！503 service unavailable，表明服务器暂时处于<strong>超负载或正在停机维护</strong>，无法处理请求</p></li></ul><p><img src="/images/loading.png" data-original="https://user-gold-cdn.xitu.io/2017/12/6/16029efaf01b284a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片摘取自HTTP图解"></p><h3 id="https"><a href="#https" class="headerlink" title="https"></a>https</h3><p>HTTPS 还是通过了 HTTP 来传输信息，但是信息通过 TLS 协议进行了加密。</p><p><strong>对称加密</strong>：对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。</p><p><strong>非对称加密</strong>：有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。</p><p>流程：首先<strong>服务端</strong>将<strong>公钥公布</strong>出去，那么客户端也就知道公钥了。接下来<strong>客户端</strong>创建一个<strong>秘钥</strong>，然后<strong>通过公钥加密</strong>并发送给<strong>服务端</strong>，<strong>服务端接收</strong>到密文以后通过<strong>私钥解密出正确的秘钥</strong>，这时候两端就都知道秘钥是什么了。</p><h3 id="ssl握手过程"><a href="#ssl握手过程" class="headerlink" title="ssl握手过程"></a>ssl握手过程</h3><ol><li>首先，<strong>客户端</strong> 访问 <strong>服务端</strong> 。这时候<strong>客户端 会生成一个随机数</strong>1，把随机数1 、自己支持的 SSL 版本号以及加密算法等这些信息告诉服务端。</li><li><strong>服务器</strong> 收到这些信息后，然后确认一下双方的加密算法，然后服务端也生成一个随机数 2 ，并<strong>将随机数 2 和 CA 颁发给自己的证书一同返回</strong>给客户端 A 。</li><li><strong>客户端</strong> 得到 CA 证书后，会去校验该 CA 证书的有效性，校验通过后，客户端生成一个随机数 3 ，然后<strong>用证书中的公钥加密随机数 3</strong> 并传输给服务端 。</li><li><strong>服务端</strong> 得到加密后的<strong>随机数 3</strong>，然后利用<strong>私钥进行解密</strong>，得到真正的随机数3。</li><li>最后，客户端 和 服务端 都有随机数1、随机数2、随机数3，然后双方利用这<strong>三个随机数生成一个对话密钥</strong>。之后传输内容就是利用对话密钥来进行加解密了。这时就是利用了对称加密，一般用的都是 AES 算法。</li><li>客户端 通知 服务端 ，指明后面的通讯用对话密钥来完成，同时通知 服务端 握手过程结束。</li><li>服务端 通知 客户端 ，指明后面的通讯用对话密钥来完成，同时通知客户端 握手过程结束。</li><li>SSL 的握手部分结束，SSL 安全通道的数据通讯开始，客户端 和服务端 开始使用相同的对话密钥进行数据通讯。</li></ol><h3 id="http2"><a href="#http2" class="headerlink" title="http2"></a>http2</h3><p>在 HTTP/2 中引入了<strong>多路复用</strong>的技术（就是在<strong>一个 TCP</strong> 连接中可以存在<strong>多条流</strong>，对端可以通过<strong>帧中的标识</strong>知道属于哪个请求）。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，可以避免 HTTP 旧版本中的队头阻塞问题，更容易实现全速传输。</p><blockquote><p><strong>帧</strong>代表着<strong>最小的数据单位</strong>，每个帧会标识出该帧属于哪个流，<strong>流</strong>也就是<strong>多个帧组成</strong>的数据流。</p></blockquote><p>在之前的 HTTP 版本中，我们是通过<strong>文本</strong>的方式传输数据。在 HTTP/2 中所有传输的数据都会被分割，并采用<strong>二进制格式编码</strong>。</p><p>在 HTTP /2 中，使用了 HPACK <strong>压缩</strong>格式对传输的 header 进行编码，减少了 <strong>header</strong> 的大小。并在两端维护了<strong>索引表</strong>，用于记录出现过的 header ，后面在传输过程中就可以传输已经记录过的 header 的<strong>键名</strong>，对端收到数据后就可以通过<strong>键名找到对应的值</strong>。</p><p>因为 HTTP/2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了，导致 HTTP/2 的表现情况反倒不如 HTTP/1 了。</p><h3 id="QUIC"><a href="#QUIC" class="headerlink" title="QUIC"></a>QUIC</h3><p>QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，比如多路复用、0-RTT、使用 TLS1.3 加密、流量控制、有序交付、重传等等功能</p><p><strong>多路复用</strong></p><p>虽然 HTTP/2 支持了多路复用，但是 TCP 协议终究是没有这个功能的。QUIC 原生就实现了这个功能，并且传输的单个数据流可以保证有序交付且不会影响其他的数据流，这样的技术就解决了之前 TCP 存在的问题。</p><p>并且 QUIC 在移动端的表现也会比 TCP 好。因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。但是 QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上。</p><p><strong>纠错机制</strong></p><p>假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包。</p><p>当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。</p><p><strong>0-RTT</strong></p><p>通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了。</p><h3 id="输入-URL-到页面渲染的整个流程"><a href="#输入-URL-到页面渲染的整个流程" class="headerlink" title="输入 URL 到页面渲染的整个流程"></a>输入 URL 到页面渲染的整个流程</h3><h4 id="dns查询"><a href="#dns查询" class="headerlink" title="dns查询"></a>dns查询</h4><ol><li>操作系统会首先在<strong>本地缓存</strong>中查询 IP</li><li>没有的话会去<strong>系统配置</strong>的 DNS 服务器中查询</li><li>如果这时候还没得话，会直接去 <strong>DNS 根服务器查询</strong>，这一步查询会找出负责 <code>com</code> 这个一级域名的服务器</li><li>然后去该服务器查询 <code>google</code> 这个二级域名</li><li>接下来三级域名的查询其实是我们配置的，你可以给 <code>www</code> 这个域名配置一个 IP，然后还可以给别的三级域名配置一个 IP</li></ol><p>接下来是 TCP 握手，应用层会下发数据给传输层，这里 <strong>TCP 协议</strong>会指明两端的<strong>端口</strong>号，然后下发给网络层。<strong>网络层</strong>中的 <strong>IP 协议</strong>会确定 IP 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了。</p><p>TLS 的握手情况以及两种加密方式：<a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html</a></p><p>数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上。这时假设服务端会响应一个 HTML 文件。</p><p>首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错。</p><p>浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件。</p><p>文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 script 标签的话，会判断是否存在 async 或者 defer ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行。</p><p>如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP/2 协议的话会极大的提高多图的下载效率。</p><p>CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西</p><p>在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;网络基础&quot;&gt;&lt;a href=&quot;#网络基础&quot; class=&quot;headerlink&quot; title=&quot;网络基础&quot;&gt;&lt;/a&gt;网络基础&lt;/h1&gt;&lt;h3 id=&quot;UDP&quot;&gt;&lt;a href=&quot;#UDP&quot; class=&quot;headerlink&quot; title=&quot;UDP&quot;&gt;&lt;/a&gt;UDP&lt;/h3&gt;&lt;p&gt;UDP 协议是&lt;strong&gt;面向无连接&lt;/strong&gt;的，正式传递数据之前&lt;strong&gt;不需要先连接&lt;/strong&gt;起双方（不可靠性）。不会对数据报文进行任何拆分和拼接操作（高效）。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>sf总结</title>
    <link href="http://yoursite.com/2021/05/08/%E6%B7%B1%E4%BF%A1%E6%9C%8D%E7%A0%94%E5%8F%91%E5%89%8D%E7%AB%AF%E5%B2%97%E4%BD%8D%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/"/>
    <id>http://yoursite.com/2021/05/08/%E6%B7%B1%E4%BF%A1%E6%9C%8D%E7%A0%94%E5%8F%91%E5%89%8D%E7%AB%AF%E5%B2%97%E4%BD%8D%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/</id>
    <published>2021-05-08T10:26:41.019Z</published>
    <updated>2020-05-12T23:13:19.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sf总结"><a href="#sf总结" class="headerlink" title="sf总结"></a>sf总结</h1><h3 id="前两轮两轮技术面"><a href="#前两轮两轮技术面" class="headerlink" title="前两轮两轮技术面"></a>前两轮两轮技术面</h3><p>前端也学了有一年了，感觉学得差不多了，就去招聘网站看看岗位要求，</p><blockquote><p>长沙知名互联网公司基本没有😭 昨天逛实习僧，看到长沙有深信服的前端岗位又是招21届的又是vue技术栈 想试试水，投一个。</p></blockquote><a id="more"></a><p>中间没有录音，凭记忆就这些了，下次一定要准备好复盘</p><h4 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h4><p><strong>说说项目的亮点，难点</strong>，两次面试都说到了项目，第一次说了购物车模块实现，路由keep-alive生命周期什么的，第二次说的使用async await去失效的图片</p><h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><ul><li>position relative absolute float</li><li>css的定位</li></ul><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><ul><li>怎么判断数组数据类型tinstanceof、Object.prototype.toString.call()等</li><li>原生ajax讲代码，请求过程</li><li>怎么原生实现同步ajax</li><li>setTimeout 执行顺序</li><li>异步同步，事件机制</li><li>宏任务与微任务</li><li>说一下get post区别</li><li>dom事件流 冒泡 捕获</li><li>事件代理</li><li>call apply区别</li><li>“==”和“===”的区别</li><li>for of 和for in区别</li></ul><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><ul><li>讲讲es6学了什么，</li><li>我说了let const 变量提升</li><li>promise async await</li><li>他叫 我说一下 set 和map</li></ul><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><ul><li>vue生命周期</li><li>vue router</li><li>组件怎么传参数 父子props emit 同组件 bus</li><li>vuex</li><li>说一下vue与react的区别</li></ul><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><ul><li>说一下Webpack基本概念与配置</li><li>loader与plugin原理与实现 ，这个不太了解，我说一般使用vue-cli自动打包plugin按需加载</li></ul><h3 id="hr面试"><a href="#hr面试" class="headerlink" title="hr面试"></a>hr面试</h3><ul><li>自我介绍</li><li>说一说你平时怎么学习，</li><li>公司项目跟自己写项目区别，</li><li>说一说你看过什么书 ，</li><li>说一说你遇到的最大的困难，</li><li>还有什么问的吗，问他新人培训机制 是怎样的</li></ul><hr><p><strong>没想到一次试水面试，三轮面试就这样过了，上午面试第一个电话还在健身房洗澡，没接，打过去裤子都没穿，边穿衣服边面试，面完没想到说我还行😇</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;sf总结&quot;&gt;&lt;a href=&quot;#sf总结&quot; class=&quot;headerlink&quot; title=&quot;sf总结&quot;&gt;&lt;/a&gt;sf总结&lt;/h1&gt;&lt;h3 id=&quot;前两轮两轮技术面&quot;&gt;&lt;a href=&quot;#前两轮两轮技术面&quot; class=&quot;headerlink&quot; title=&quot;前两轮两轮技术面&quot;&gt;&lt;/a&gt;前两轮两轮技术面&lt;/h3&gt;&lt;p&gt;前端也学了有一年了，感觉学得差不多了，就去招聘网站看看岗位要求，&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;长沙知名互联网公司基本没有😭 昨天逛实习僧，看到长沙有深信服的前端岗位又是招21届的又是vue技术栈 想试试水，投一个。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="实习" scheme="http://yoursite.com/categories/%E5%AE%9E%E4%B9%A0/"/>
    
    
      <category term="实习" scheme="http://yoursite.com/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>浏览器跨域问题</title>
    <link href="http://yoursite.com/2021/05/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2021/05/08/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</id>
    <published>2021-05-08T10:26:41.018Z</published>
    <updated>2020-02-08T14:10:46.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器跨域问题"><a href="#浏览器跨域问题" class="headerlink" title="浏览器跨域问题"></a>浏览器跨域问题</h1><blockquote><p>处于安全考虑 如果<strong>协议、域名或者端口</strong>有一个不同就是跨域，Ajax 请求会失败。</p></blockquote><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><blockquote><p>利用<code>&lt;script&gt;</code>标签<strong>没有 跨域限制</strong>，<strong>指向</strong>一个需要<strong>访问的地址</strong>并提供一个<strong>回调</strong>函数来<strong>接收数据</strong>。只限于 <code>get</code> 请求。</p></blockquote><a id="more"></a><p>实现jsonp封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url, jsonpCallback, success</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">  script.src = url</span><br><span class="line">  script.async = <span class="literal">true</span></span><br><span class="line">  script.type = <span class="string">'text/javascript'</span></span><br><span class="line">  <span class="comment">// 约定一个callback字段名，来传递函数名，前端通过该函数来拿到数据</span></span><br><span class="line">  <span class="built_in">window</span>[jsonpCallback] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    success &amp;&amp; success(data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonp(<span class="string">'http://xxx'</span>, <span class="string">'callback'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><blockquote><p>它允许浏览器向跨域服务器发出XMLHttpRequest请求，从而克服跨域问题，它需要浏览器和服务器的同时支持。</p></blockquote><p>在服务端增加一些<strong>头部属性</strong>就行，客户端浏览器会自动添加origin字段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入http库</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="comment">// 字段</span></span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>,</span><br><span class="line">      <span class="comment">// 允许请求的地址</span></span><br><span class="line">      <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">      <span class="comment">// 请求方法</span></span><br><span class="line">      <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'GET, POST, PUT'</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    response.end(<span class="string">'request success!!!'</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浏览器跨域问题&quot;&gt;&lt;a href=&quot;#浏览器跨域问题&quot; class=&quot;headerlink&quot; title=&quot;浏览器跨域问题&quot;&gt;&lt;/a&gt;浏览器跨域问题&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;处于安全考虑 如果&lt;strong&gt;协议、域名或者端口&lt;/strong&gt;有一个不同就是跨域，Ajax 请求会失败。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;jsonp&quot;&gt;&lt;a href=&quot;#jsonp&quot; class=&quot;headerlink&quot; title=&quot;jsonp&quot;&gt;&lt;/a&gt;jsonp&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;利用&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签&lt;strong&gt;没有 跨域限制&lt;/strong&gt;，&lt;strong&gt;指向&lt;/strong&gt;一个需要&lt;strong&gt;访问的地址&lt;/strong&gt;并提供一个&lt;strong&gt;回调&lt;/strong&gt;函数来&lt;strong&gt;接收数据&lt;/strong&gt;。只限于 &lt;code&gt;get&lt;/code&gt; 请求。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>毛概课后复习参考答案</title>
    <link href="http://yoursite.com/2021/05/08/%E6%AF%9B%E6%A6%82%E8%AF%BE%E5%90%8E%E5%A4%8D%E4%B9%A0%E9%A2%98%E5%8F%82%E8%80%83%EF%BC%9A/"/>
    <id>http://yoursite.com/2021/05/08/%E6%AF%9B%E6%A6%82%E8%AF%BE%E5%90%8E%E5%A4%8D%E4%B9%A0%E9%A2%98%E5%8F%82%E8%80%83%EF%BC%9A/</id>
    <published>2021-05-08T10:26:41.017Z</published>
    <updated>2019-07-13T05:13:26.454Z</updated>
    
    <content type="html"><![CDATA[<p>课后复习题参考：</p><p><strong>第一章</strong></p><p>1、毛泽东思想的含义</p><p>毛泽东思想是马克思主义中国化的第一个重大理论成果，是马克思列宁主义在中国的运用和发展，是被实践证明了的关于中国革命和建设的正确的理论原则和经验总结，是中国共产党集体智慧的结晶，是党必须长期坚持的指导思想。</p><a id="more"></a><p>2、毛泽东思想形成发展的历史条件</p><p>19世纪末20世纪初，世界进入帝国主义和无产阶级革命时代，作为中国反帝反封建民主革命指导思想的毛泽东思想，正是在这样的时代条件下形成和发展起来的。</p><p>中国共产党领导人民进行革命和建设的成功实践是毛泽东思想形成和发展的实践基础。</p><p>3、毛泽东思想的主要内容和活的灵魂。</p><p>主要内容：新民主主义革命理论、社会主义革命和社会主义建设理论、革命军队建设和军事战略的理论、政策和策略的理论、思想政治工作和文化工作的理论、党的建设理论，这些是毛泽东思想科学体系的主要内容。</p><p>活的灵魂：实事求是、群众路线、独立自主是毛泽东思想的活的灵魂。</p><p>选择题：毛泽东思想在土地革命战争时期形成，在抗日战争时期走向成熟，并在解放战争时期和中华人民共和国成立后继续发展。</p><p><strong>第二章</strong></p><p>1、新民主主义革命总路线：1948年，他在《在晋绥干部会议上的讲话》中完整地表述了总路线的内容，即无产阶级领导的，人民大众的，反对帝国主义、封建主义和官僚资本主义的革命。新民主主义革命总路线反映了中国革命的基本规律，指明了中国革命的对象、动力、领导力量，是新民主主义革命的指导路线。</p><p>2、怎样理解中国革命必须由无产阶级及其政党来领导？</p><p>无产阶级及其政党的领导，是中国革命取得胜利的根本保证，无产阶级的领导权是中国革命的中心问题。</p><p>中国革命必须由无产阶级及其政党来领导，这是历史发展的必然：由于帝国主义不允许中国民族资产阶级建立独立的资产阶级共和国，而是要把中国变成它们的殖民地和半殖民地；由于中国民族资产阶级的软弱性和妥协性，它们不愿意也不能够彻底推翻帝国主义和封建势力；由于中国无产阶级的强大和革命的彻底性，领导中国革命的重任，历史地落到了中国无产阶级及其政党的肩上。</p><p>中国无产阶级及其政党能领导中国革命的可能性：中国无产阶级除了具有一般无产阶级的基本优点外，还具有自身的特点和优点。一是深受外国资本主义、本国封建势力和资产阶级的三重压迫，比任何别的阶级都来得坚决和彻底；二是它分布集中，有利于无产阶级队伍的组织和团结，有利于革命思想的传播和强大革命力量的形成；三是它的成员中的大部分出身于破产农民，便于和农民结成亲密的联盟。</p><p>无产阶级及其政党对中国革命的领导权不是自然而然得来的，而是在与资产阶级争夺领导权的斗争中实现的。</p><p>3、新民主主义的政治纲领是：推翻帝国主义和封建主义的统治，建立一个无产阶级领导的、以工农联盟为基础的、各革命阶级联合专政的新民主主义的共和国。新民主主义共和国既不同于欧美式的资产阶级专政的共和国，又和苏联式的无产阶级专政的社会主义共和国相区别。</p><p>4、新民主主义的经济纲领是：没收封建地主阶级的土地归农民所有，没收官僚资产阶级的垄断资本归新民主主义的国家所有，保护民族工商业。</p><p>5、中国革命必须走农村包围城市、武装夺取政权的道路的必然性？</p><p>这是由中国所处的时代特点和具体国情决定的。一方面，在半殖民地半封建的中国社会，内无民主制度而受封建主义的压迫，外无民族独立而受帝国主义的压迫，这决定了中国革命的主要斗争形式只能是武装斗争，以革命的武装消灭反革命的武装，相应的主要组织形式必然是军队。另一方面，近代中国是一个农业大国，农民占全国人口的绝大多数，是无产阶级可靠的同盟军和革命的主力军，这决定了在中国开展革命斗争，必须充分地发动农民，凝聚农民阶级的革命力量，即走农村道路。</p><p>6、中国革命之所以能走农村包围城市、武装夺取政权的道路的可能性。</p><p>第一，近代中国是多个帝国主义间接统治的经济落后的半殖民地国家，为党在农村开展革命提供了可能；第二，农民革命愿望强烈，且革命的群众基础好。第三，全国革命形势的继续向前发展，为在农村建设革命根据地提供了客观条件。第四，相当力量正式红军的存在，为农村革命根据地的创立、巩固和发展提供了坚强后盾。第五，党的领导的有力量及其政策的不错误，为农村革命根据地建设和发展提供了重要的主观条件。</p><p>6、农村革命道路的主要内容。</p><p>中国革命走农村包围城市、武装夺取政权的道路，根本在于处理好土地革命、武装斗争、农村革命根据地建设三者之间的关系。</p><p>三者有机统一：土地革命是民主革命的基本内容；武装斗争是中国革命的主要形式，是农村根据地建设和土地革命的强有力保证；农村革命根据地是中国革命的战略阵地，是进行武装斗争和开展土地革命的依托。</p><p>7、如何理解新民主主义革命的三大法宝及其相互关系？</p><p>统一战线、武装斗争、党的建设中国共产党在中国革命中战胜敌人的三个主要的法宝，是新民主主义革命胜利的基本经验。</p><p>三者之间的关系：统一战线和武装斗争是中国革命的两个基本特点，是战胜敌人的两个基本武器。统一战线是实行武装斗争的统一战线，武装斗争是统一战线的中心支柱，党的组织则是掌握统一战线和武装斗争这两个武器以实行对敌冲锋陷阵的英勇战士。</p><p><strong>第三章</strong></p><p>1、为什么说新民主主义社会是一个过渡性社会？</p><p>从中华人民共和国成立到社会主义改造基本完成，是我国从新民主主义到社会主义的过渡时期。这一时期，我国社会的性质是新民主主义社会。</p><p>从经济上看，五种经济成分并存，即社会主义性质的国营经济、半社会主义性质的合作社经济、农民和手工业者的个体经济、私人资本主义经济和国家资本主义经济。其中主要的经济成分是三种：社会主义经济、个体经济和资本主义经济。</p><p>从政治上看，与三种主要经济成分之对应，中国社会的阶级构成主要是工人阶级、农民阶级和其他小资产阶级、民族资产阶级等基本的阶级力量。</p><p>在新民主主义社会中，社会主义的因素不论在经济上还是在政治上都已经居于领导地位，但非社会主义因素仍有很大比重。</p><p>总之，新民主主义社会是属于社会主义体系的，是逐步过渡到社会主义社会的过渡性质的社会。</p><p>2、党在过渡时期的总路线</p><p>党在过渡时期的总路线的内容：从中华人民共和国成立，到社会主义改造基本完成，这是一个过渡时期。党在这个过渡时期的总路线和总任务，是要在一个相当长的时期内，逐步实现国家的社会主义工业化，并逐步实现国家对农业、对手工业和对资本主义工商业的社会主义改造，简单概括为“一化三改”。</p><p>过渡时期的总路线是一条社会主义建设和社会主义改造同时并举的路线，体现了社会主义工业化和社会主义改造的紧密结合，体现了解放生产力与发展生产力、变革生产关系与发展生产力的有机统一。</p><p>\3. 如何理解中国确立社会主义基本制度的重大意义？</p><p>社会主义基本制度的确立是中国历史上最深刻最伟大的社会变革，为当代中国一切发展进步奠定了制度基础，也为中国特色社会主义制度的创新和发展提供了重要前提。</p><p>社会主义基本制度的确立，极大地促进了我国社会生产力的发展也初步显示了社会主义的优越性，还为在中国这样一个社会生产力水平十分落后的东方大国进行社会主义建设积累了重要经验。</p><p>中国社会主义基本制度的确立，是世界社会主义发展史上又一个历史性的伟大胜利，也进一步改变了世界政治经济格局，增强了社会主义的力量，对维护世界和平产生了积极影响。</p><p>我国社会主义基本制度的确立，再次证明了马克思列宁主义的真理性，而且以其独创性的理论原则和经验总结丰富和发展了科学社会主义理论。</p><p><strong>第四章</strong></p><p>1、毛泽东关于社会主义社会基本矛盾的思想？</p><p>矛盾是普遍存在的，社会主义社会同样充满着矛盾，正是这些矛盾推动着社会主义社会不断地向前发展。</p><p>在社会主义社会中，基本的矛盾仍然是生产关系和生产力之间的矛盾，上层建筑和经济基础之间的矛盾。</p><p>但社会主义社会的基本矛盾不是对抗性的矛盾，而是非对抗性的矛盾。社会主义社会基本矛盾运动具有“又相适应又相矛盾”的特点，是在生产关系和生产力基本适应、上层建筑和经济基础基本适应条件下的矛盾，是在人民根本利益一致基础上的矛盾。</p><p>社会主义社会基本矛盾可以经过社会主义制度本身，不断地得到解决。</p><p>2、毛泽东关于区分两类不同性质矛盾和正确处理人民内部矛盾两类性质不同社会矛盾的理论？</p><p>社会主义社会存在两类不同性质矛盾，这就是敌我矛盾和人民内部矛盾。敌我矛盾是根本利益对立基础上的矛盾，因而是对抗性的矛盾。人民内部矛盾是在人民根本利益一致基础上的矛盾，因而是非对抗性的矛盾。必须严格区分和正确处理两类不同性质的矛盾。</p><p>敌我矛盾采用专政的方法解决。人民内部矛盾采用民主的方法，如对于政治思想领域的人民内部矛盾，实行“团结—批评—团结”的方针；对于科学文化领域里的矛盾，实行“百花齐放、百家争鸣”的方针；对于共产党和民主党派的矛盾，实行“长期共存、互相监督”的方针</p><p>正确处理人民内部矛盾的问题是社会主义国家政治生活的主题。</p><p>\2. 党对社会主义建设道路初步探索的重大意义？</p><p>党对社会主义建设道路初步探索在理论和实践上取得的一系列重要成果，对于巩固我国社会主义制度，开创和发展中国特色社会主义，促进世界社会主义的发展，具有重要意义。</p><p>第一，巩固和发展了我国的社会主义制度。第二，为开创中国特色社会主义提供了宝贵经验、理论准备、物质基础。第三，丰富了科学社会主义的理论和实践。</p><p><strong>第五章</strong></p><p>1、邓小平理论形成的社会历史条件。</p><p>邓小平理论贯穿解放思想、实事求是的思想路线，围绕“什么是社会主义、怎样建设社会主义”这个首要的基本的理论问题。邓小平理论形成的社会历史条件：第一、和平与发展成为时代主题是邓小平理论形成的时代背景。第二，社会主义建设的经验教训是邓小平理论形成的历史根据。第三，改革开放和现代化建设的实践是邓小平理论形成的现实依据。</p><p>2、邓小平理论的社会主义本质论？</p><p>1992年初，邓小平在南方谈话中对社会主义本质作了总结性理论概括：“社会主义的本质，是解放生产力，发展生产力，消灭剥削，消除两极分化，最终达到共同富裕。”</p><p>3、邓小平的社会主义初级阶段理论？</p><p>我国处在社会主义初级阶段，是邓小平和我们党对当代中国基本国情的科学判断。社会主义初级阶段的论断包括两层含义：第一，我国已经进入社会主义社会，必须坚持而不能离开社会主义。第二，我国的社会主义社会还处在不发达的阶段，必须正视而不能超越初级阶段。</p><ol start="4"><li>党的基本路线</li></ol><p>党的十三大报告提出了党在社会主义初级阶段的基本路线：领导和团结全国各族人民，以经济建设为中心，坚持四项基本原则，坚持改革开放，自力更生，艰苦创业，为把我国建设成为富强、民主、文明的社会主义现代化国家而奋斗。</p><p>党的基本路线在改革开放实践中不断充实和完善。党的十七大把“和谐”与“富强、民主、文明”一起写入了基本路线。党的十九大进一步修改为“为把我国建设成为富强民主文明和谐美丽的社会主义现代化强国而奋斗”，不仅将“美丽”纳入了基本路线，而且将“现代化国家”提升为“现代化强国”，扩展了党的基本路线的内涵，提升了社会主义初级阶段的奋斗目标。</p><p>5、邓小平的社会主义市场经济理论？</p><p>邓小平社会主义市场经济理论的要点有：一是计划经济和市场经济不是划分社会制度的标志，计划经济不等于社会主义，市场经济也不等于资本主义；二是计划和市场都是经济手段，对经济活动的调节各有优势和长处，社会主义实行市场经济要把两者结合起来；三是市场经济作为资源配置的一种方式本身不具有制度属性，可以和不同的社会制度结合，从而表现出不同的性质。坚持社会主义制度与市场经济的结合，是社会主义市场经济的特色所在。</p><p><strong>第六章</strong></p><p>1、“三个代表”重要思想的形成条件？</p><p>第一，“三个代表”重要思想是在对冷战结束后国际局势科学判断的基础上形成的。冷战结束后世界多极化和经济全球化的趋势在曲折中发展，和平与发展仍是时代的主题。我们党所处的国际国内环境已经发生并还在经历着前所未有的巨大变化，这是“三个代表”重要思想产生的最重要的时代背景。第二，“三个代表”重要思想是在科学判断党的历史方位和总结历史经验的基础上提出来的。党所处的地位和环境、党所肩负的历史任务、党的自身状况，都发生了新的重大变化。进一步提高党的领导水平和执政水平、提高拒腐防变和抵御风险的能力，是我们党必须解决好的两大历史性课题。“三个代表”重要思想的提出，正是立足于党的历史、总结党的历史经验得出的重要结论。第三，“三个代表”重要思想是在建设中国特色社会主义伟大实践基础上形成的。</p><p>2、“三个代表”重要思想的核心观点</p><p>围绕着“建设一个什么样的党、怎样建设党”这一重大现实问题，江泽民提出了“三个代表”重要思想。“中国共产党必须始终代表中国先进生产力的发展要求，代表中国先进文化的前进方向，代表中国最广大人民的根本利益。”这是对“三个代表”重要思想的集中概括。</p><p><strong>第七章</strong></p><ol><li>科学发展观的科学内涵？</li></ol><p>科学发展观，第一要义是发展，核心立场是以人为本，基本要求是全面协调可持续，根本方法是统筹兼顾。这是对科学发展观的集中概括。</p><p>课后复习题参考：</p><p><strong>第八章</strong></p><p>1、中国特色社会主义进入新时代的重大意义？</p><p>答：中国特色社会主义进入新时代，在中华人民共和国发展史上、中华民族发展史上具有重大意义，在世界社会主义发展史上、人类社会发展史上也具有重大意义。</p><p>第一、从中华民族复兴的历史进程看，中国特色社会主义进入新时代，意味着近代以来久经磨难的中华民族迎来了从站起来、富起来到强起来的伟大飞跃，迎来了实现中华民族伟大复兴的光明前景。</p><p>第二、从科学社会主义发展进程看，中国特色社会主义进入新时代，意味着科学社会主义在21世纪的中国焕发出强大生机活力，在世界上高高举起了中国特色社会主义伟大旗帜。</p><p>第三，从人类文明进程看，中国特色社会主义进入新时代，意味着中国特色社会主义道路、理论、制度、文化不断发展，拓展了发展中国家走向现代化的途径，给世界上那些既希望加快发展又希望保持自身独立性的国家和民族提供了全新选择，为解决人类问题贡献了中国智慧和中国方案。</p><p>2.试论述新时代我国社会主要矛盾已发生了怎样的转化？并说明实现这一转化的主要依据是什么？</p><p>答：党的十九大明确指出，我国社会主要矛盾已经转化为人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾。主要依据有以下三个方面：</p><p>一是经过改革开放40年的发展，我国社会生产力水平总体上显著提高，很多方面进入世界前列。如我国国内生产总值自2010年开始稳居世界第二位……这说明，我国进入社会主义初级阶段以来的“落后的社会生产”已经发生了新的阶段性变化。</p><p>二是人民生活水平显著提高，对美好生活的向往更加强烈，不仅对物质文化生活提出了更高要求，而且在民主、法治、公平、正义、安全、环境等方面的要求日益增长。这说明，人民群众对于日益增长的“物质文化需要”层次更高、内容范围更广，出现了阶段性的新特征。</p><p>三是影响满足人们美好生活需要的因素很多，但主要是发展的不平衡不充分问题。发展不平衡，主要指各区域各领域各方面发展不平衡，制约了全国发展水平提升。发展不充分，主要指一些地区、一些领域、一些方面还存在发展不足的问题，发展的任务仍然很重。发展不平衡不充分问题表现在很多方面。</p><p>这些发展不平衡不充分问题相互掣肘，带来很多社会矛盾和问题，是当前和今后一个时期制约我国发展和满足人民日益增长的美好生活需要的主要根源。</p><p><strong>第九章</strong></p><p>1.新时代建设中国特色社会主义的总任务？</p><p>坚持和发展中国特色社会主义的总任务，是实现社会主义现代化和中华民族伟大复兴，在全面建成小康社会的基础上，分两步走在本世纪中叶建成富强民主文明和谐美丽的社会主义现代化强国。中国梦是中华民族伟大复兴的形象表达，中国梦的本质是国家富强、民族振兴、人民幸福。</p><p>2.新时代中国特色社会主义发展的战略安排？</p><p>从全面建成小康社会到基本实现现代化，再到全面建成社会主义现代化强国，是新时代中国特色社会主义发展的战略安排。全面建设社会主义现代化国家的进程分两个阶段：第一个阶段，从2020年到2035年，在全面建成小康社会的基础上，再奋斗15年，基本实现社会主义现代化。第二个阶段，从2035年到本世纪中叶；在基本实现现代化的基础上，再奋斗15年，把我国建成富强民主文明和谐美丽的社会主义现代化强国。</p><p><strong>第十章</strong></p><pre><code>1.新时代如何推进现代化经济体系建设？</code></pre><p>推动建设现代化经济体系，必须贯彻创新、协调、绿色、开放、共享的新发展理念，必须坚持供给侧结构性改革，，推动经济发展质量变革、效率变革、动力变革，实现高质量增长。</p><ol start="2"><li>如何正确理解坚持党的领导、人民当家作主和依法治国的有机统一？</li></ol><p>走中国特色社会主义道路，必须坚持党的领导、人民当家作主和依法治国的有机统一。</p><p>党的领导是人民当家作主和依法治国的根本保证，人民当家作主是社会主义民主政治的本质特征，依法治国是党领导人民治理国家的基本方式，三者统一于我国社会主义民主政治伟大实践。</p><ol start="3"><li>如何推动社会主义文化繁荣兴盛？</li></ol><p>推动社会主义文化繁荣兴盛，必须坚持走中国特色社会主义文化发展道路：第一，必须巩固马克思主义在意识形态领域的指导地位，牢牢把握意识形态工作领导权；第二，必须弘扬社会主义核心值体系和核心价值观。社会主义核心价值体系由马克思主义指导思想、中国特色社会主义共同理想、以爱国主义为核心的民族精神和以改革创新为核心的时代精神、社会主义荣辱观四个方面内容构成。社会主义核心价值观是富强、民主、文明、和谐，自由、民主、公正、法治，爱国、敬业、诚信、友善。第三，必须坚定文化自信，建设社会主义文化强国，大力发展文化事业和文化产业，提高国家文化软实力。</p><ol start="4"><li>如何在发展中加强和改善民生？</li></ol><p>民生是人民幸福之基、社会和谐之本，在发展中加强和改善民生，第一，必须提高和改善民生水平，包括优先发展教育事业，提高就业质量和人民收入水平，加强社会保障体系建设，坚决打赢脱贫攻坚战，实施健康中国战略；第二，必须加强和创新社会治理，包括创新社会治理体制，改进社会治理方式等；第三，坚持国家总统安全观，包括完善国家安全体系，健全公共安全等。</p><ol start="5"><li>如何建设美丽中国？</li></ol><p>建设美丽中国，首先必须坚持人与自然和谐共生，形成人与自然和谐发展的新格局，把节约资源放在首位，坚持保护优先，着力推进绿色发展，实现最严格的环境保护政策，加快生态文明体制改革。</p><p><strong>第十一章</strong></p><p>1.党在新形势下治国理政的总方略？</p><p>“四个全面”战略布局是我们党在新形势下治国理政的总方略。全面建成小康社会是战略目标，全面深化改革、全面依法治国、全面从严治党是战略举措。</p><p>2.全面深化改革的总目标？</p><p>全面深化改革的总目标是完善和发展中国特色社会主义制度，推进国家治理体系和治理能力现代化。</p><p>3.如何走中国特色社会主义法治道路？</p><p>坚持中国共产党的领导，党的领导是社会主义法治最根本的保证。坚持人民在全面依法治国中的主体地位。坚持法律面前人人平等。坚持依法治国和以德治国相结合。坚持从中国实际出发。</p><p>4.新时代党的建设总要求？</p><p>新时代党的建设总要求是：坚持和加强党的全面领导，坚持党要管党、全面从严治党，以加强党的长期执政能力建设、先进性和纯洁性建设为主线，以党的政治建设为统领，以坚定理想信念宗旨为根基，以调动全党积极性、主动性、创造性为着力点，全面推进党的政治建设、思想建设、组织建设、作风建设、纪律建设，把制度建设贯穿其中，深入推进反腐败斗争，不断提高党的建设质量，把党建设成为始终走在时代前列、人民衷心拥护、勇于自我革命、经得起各种风浪考验、朝气蓬勃的马克思主义执政党。</p><p><strong>第十二章</strong></p><p>1.习近平强军思想的主要内容？</p><p>习近平强军思想深刻回答了“新时代建设一支什么样的强大人民军队、怎样建设强大人民军队”的时代课题，其主要内容有：一是强国必须强军；二是建设世界一流军队。三是党对军队的绝对领导是人民军队建军之本。四是必须构建中国特色现代军事力量体系。五是必须加强军队作风建设和纪律建设。六是推进强军事业必须坚持政治建军、改革强军、科技兴军、依法治军，更加注重聚焦实战、更加注重创新驱动、更加注重体系建设、更加注重集约高效、更加注重军民融合，全面提高革命化现代化正规化水平。七是改革是强军的必由之路。九是现代化军队必须构建中国特色军事法治体系。十是军民融合发展是兴国之举、强军之策。</p><p><strong>第十三章</strong></p><p>1.如何认识当今世界发展趋势？</p><p>第一、世界多极化在曲折中发展；第二、 经济全球化深入发展；第三、 文化多样化持续推进；第四，社会信息化快速发展</p><p>2.如何理解构建人类命运共同体思想？</p><p>第一，政治上，要相互尊重、平等协商，坚决摒弃冷战思维和强权政治，走对话而不对抗、结伴而不结盟的国与国交往新路。第二，安全上，要坚持以对话解决争端、以协商化解分歧，统筹应对传统和非传统安全威胁，反对一切形式的恐怖主义。第三，经济上，要同舟共济，促进贸易和投资自由化便利化，推动经济全球化朝着更加开放、包容、普惠、平衡、共赢的方向发展。第四，文化上，要尊重世界文明多样性，以文明交流超越文明隔阂、文明互鉴超越文明冲突、文明共存超越文明优越。第五，生态上，要坚持环境友好，合作应对气候变化，保护好人类赖以生存的地球家园。</p><p><strong>第十四章</strong></p><ol><li>党的领导是中国特色社会主义最本质的特征</li></ol><p>第一，这是由科学社会主义的理论逻辑所决定的，坚持无产阶级政党的领导是无产阶级革命和社会主义建设取得胜利的根本保证。第二，这是由中国特色社会主义产生与发展的历史逻辑所决定的。历史和现实证明，没有中国共产党的领导，就没有中国特色社会主义的产生与发展。</p><p>第三，这是由中国特色社会主义迈向新征程的实践逻辑所决定的。实现中华民族伟大复兴，关键在党。</p><ol start="2"><li>党的领导是中国特色社会主义制度的最大优势</li></ol><p>中国共产党的领导是中国特色社会主义制度的最大优势。第一，党是中国特色社会主义制度的创建者。第二，党的领导是充分发挥中国特色社会主义制度优势的根本保障。第三，党的自身优势是中国特色社会主义制度优势的主要来源。</p><ol start="3"><li>新时代中国共产党的历史使命？</li></ol><p>新时代中国共产党的历史使命，就是统揽伟大斗争、伟大工程、伟大事业、伟大梦想，在全面建成小康社会的基础上全面建成社会主义现代化强国，实现中华民族伟大复兴。</p><ol start="4"><li>党是最高政治领导力量？</li></ol><p>第一，这是马克思主义政党的基本要求。第二，这是对党领导革命、建设和改革历史经验的深刻总结。第三，这是推进伟大事业的根本保证。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;课后复习题参考：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第一章&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1、毛泽东思想的含义&lt;/p&gt;&lt;p&gt;毛泽东思想是马克思主义中国化的第一个重大理论成果，是马克思列宁主义在中国的运用和发展，是被实践证明了的关于中国革命和建设的正确的理论原则和经验总结，是中国共产党集体智慧的结晶，是党必须长期坚持的指导思想。&lt;/p&gt;
    
    </summary>
    
    
      <category term="思政" scheme="http://yoursite.com/categories/%E6%80%9D%E6%94%BF/"/>
    
    
  </entry>
  
  <entry>
    <title>JS中的正则</title>
    <link href="http://yoursite.com/2021/05/08/%E6%AD%A3%E5%88%99/"/>
    <id>http://yoursite.com/2021/05/08/%E6%AD%A3%E5%88%99/</id>
    <published>2021-05-08T10:26:41.016Z</published>
    <updated>2020-03-16T04:11:11.010Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>RegExp.prototype.exec</td><td>一个在字符串中执行查找匹配的RegExp方法，它返回一个<strong>数组</strong>（未匹配到则返回 null）。</td></tr><tr><td>RegExp.prototype.test</td><td>一个在字符串中测试是否匹配的RegExp方法，它<strong>返回 true 或 false</strong>。</td></tr><tr><td>String.prototype.match</td><td>一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。</td></tr><tr><td>String.prototype.matchAll</td><td>一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。</td></tr><tr><td>String.prototype.search</td><td>一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。</td></tr><tr><td>String.prototype.replace</td><td>一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。</td></tr><tr><td>String.prototype.split</td><td>一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 <code>String</code> 方法。</td></tr></tbody></table><a id="more"></a><h3 id="符号表格"><a href="#符号表格" class="headerlink" title="符号表格"></a>符号表格</h3><table><thead><tr><th>特殊字符</th><th>正则表达式</th><th>记忆方式</th></tr></thead><tbody><tr><td>换行符</td><td>\n</td><td><strong>n</strong>ew line</td></tr><tr><td>换页符</td><td>\f</td><td><strong>f</strong>orm feed</td></tr><tr><td>回车符</td><td>\r</td><td><strong>r</strong>eturn</td></tr><tr><td>空白符</td><td>\s</td><td><strong>s</strong>pace</td></tr><tr><td>非空白符</td><td>\S</td><td></td></tr><tr><td>制表符</td><td>\t</td><td><strong>t</strong>ab</td></tr><tr><td>垂直制表符</td><td>\v</td><td><strong>v</strong>ertical tab</td></tr><tr><td>单词边界</td><td>\b</td><td><strong>b</strong>oundary</td></tr><tr><td>非单词边界</td><td>\B</td><td></td></tr><tr><td>回退符</td><td>[\b]</td><td><strong>b</strong>ackspace,之所以使用[]符号是避免和\b重复</td></tr><tr><td>除了换行符之外的任何字符</td><td>.</td><td>句号,除了句子结束符</td></tr><tr><td>单个数字, [0-9]</td><td>\d</td><td><strong>d</strong>igit</td></tr><tr><td>除了[0-9]</td><td>\D</td><td><strong>not</strong> <strong>d</strong>igit</td></tr><tr><td>包括下划线在内的单个字符，[A-Za-z0-9_]</td><td>\w</td><td><strong>w</strong>ord</td></tr><tr><td>非单字字符</td><td>\W</td><td><strong>not</strong> <strong>w</strong>ord</td></tr><tr><td>0 或1个字符，惰性匹配</td><td>?</td><td>有无？</td></tr><tr><td>大于0个字符</td><td>*</td><td></td></tr><tr><td>大于1个字符</td><td>+</td><td>+1</td></tr><tr><td>分组</td><td>()</td><td></td></tr><tr><td>匹配区间集合</td><td>[ ]</td><td>[0-9] , [a-z]</td></tr><tr><td>匹配重复次数</td><td>{ }</td><td></td></tr></tbody></table><blockquote><ul><li>{x}: x次</li></ul><ul><li>{min, max}： 介于min次到max次之间</li><li>{min, }: 至少min次</li><li>{0, max}： 至多max次</li></ul></blockquote><table><thead><tr><th>边界和标志</th><th>正则表达式</th><th>记忆方式</th></tr></thead><tbody><tr><td>字符串开头</td><td>^</td><td></td></tr><tr><td>字符串结尾</td><td>$</td><td></td></tr><tr><td>多行模式</td><td>m标志</td><td><strong>m</strong>ultiple of lines</td></tr><tr><td>忽略大小写</td><td>i标志</td><td><strong>i</strong>gnore case, case-<strong>i</strong>nsensitive</td></tr><tr><td>全局模式</td><td>g标志</td><td><strong>g</strong>lobal</td></tr></tbody></table><h3 id="p-和-p-的理解"><a href="#p-和-p-的理解" class="headerlink" title="(?=p)和(?!p)的理解"></a><strong>(?=p)和(?!p)的理解</strong></h3><p><code>(?=p)</code>，其中<code>p</code>是一个子模式，即<code>p</code>前面的<strong>位置</strong>。</p><p>比如<code>(?=l)</code>，表示’l’字符前面的位置，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配l前面的位置</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/(?=l)/g</span>, <span class="string">'#'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); </span><br><span class="line"><span class="comment">// =&gt; "he#l#lo"</span></span><br></pre></td></tr></table></figure><p>而<code>(?!p)</code>就是<code>(?=p)</code>的反面意思，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/(?!l)/g</span>, <span class="string">'#'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); </span><br><span class="line"><span class="comment">// =&gt; "#h#ell#o#"</span></span><br></pre></td></tr></table></figure><h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><p>反向引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/\d&#123;4&#125;(-|\/|\.)\d&#123;2&#125;\1\d&#123;2&#125;/</span>;</span><br><span class="line"><span class="keyword">var</span> string1 = <span class="string">"2017-06-12"</span>;</span><br><span class="line"><span class="keyword">var</span> string2 = <span class="string">"2017/06/12"</span>;</span><br><span class="line"><span class="keyword">var</span> string3 = <span class="string">"2017.06.12"</span>;</span><br><span class="line"><span class="keyword">var</span> string4 = <span class="string">"2016-06/12"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(string1) ); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(string2) ); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(string3) ); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( regex.test(string4) ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>注意里面的<code>\1</code>，表示的引用之前小括号的那个分组<code>(-|\/|\.)</code>。</p><p><code>\2</code>和<code>\3</code>即分别指代第二个和第三个分组。</p><p><strong>括号嵌套</strong>以左括号为准</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/^((\d)(\d(\d)))\1\2\3\4$/</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"1231231233"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( regex.test(string) ); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.$<span class="number">1</span> ); <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.$<span class="number">2</span> ); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.$<span class="number">3</span> ); <span class="comment">// 23</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">RegExp</span>.$<span class="number">4</span> ); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><hr><p>更复杂的正则 参考推荐老姚写的正则迷你书：<a href="https://juejin.im/post/5965943ff265da6c30653879#heading-5" target="_blank" rel="noopener">https://juejin.im/post/5965943ff265da6c30653879#heading-5</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h3&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/th&gt;&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;RegExp.prototype.exec&lt;/td&gt;&lt;td&gt;一个在字符串中执行查找匹配的RegExp方法，它返回一个&lt;strong&gt;数组&lt;/strong&gt;（未匹配到则返回 null）。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;RegExp.prototype.test&lt;/td&gt;&lt;td&gt;一个在字符串中测试是否匹配的RegExp方法，它&lt;strong&gt;返回 true 或 false&lt;/strong&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;String.prototype.match&lt;/td&gt;&lt;td&gt;一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;String.prototype.matchAll&lt;/td&gt;&lt;td&gt;一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;String.prototype.search&lt;/td&gt;&lt;td&gt;一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;String.prototype.replace&lt;/td&gt;&lt;td&gt;一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;String.prototype.split&lt;/td&gt;&lt;td&gt;一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 &lt;code&gt;String&lt;/code&gt; 方法。&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>服务器部署node新手教程（二）</title>
    <link href="http://yoursite.com/2021/05/08/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2node%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2021/05/08/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2node%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2021-05-08T10:26:41.015Z</published>
    <updated>2020-01-02T12:39:13.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器部署node教程（二）"><a href="#服务器部署node教程（二）" class="headerlink" title="服务器部署node教程（二）"></a>服务器部署node教程（二）</h1><blockquote><p>期间经历了很多坑，多数还是找到了解决办法，相信经历了第一次，以后就能孰能生巧了。</p></blockquote><h3 id="安装最新的node-js环境"><a href="#安装最新的node-js环境" class="headerlink" title="安装最新的node.js环境"></a>安装最新的node.js环境</h3><a id="more"></a><p><code>ssh 用户名</code></p><p><code>yum update -y</code>更新</p><p><code>yum install -y nodejs</code>安装nodejs</p><p>查看结果无误，不过版本太低低 删掉 rm</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572102034266.png" alt="1572102034266"></p><p><strong>去官网下</strong></p><p><code>https://nodejs.org/dist/</code></p><p>我下载的最新13版本</p><p><code>wget https://nodejs.org/dist/v13.0.1//node-v13.0.1-linux-x64.tar.xz</code></p><p>解压</p><p><code>tar -xvJf node-v13.0.1-linux-x64.tar.xz</code></p><p>利用软链接放到环境变量 必须用绝对路径 ，路径自己ls查看</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572105757441.png" alt="1572105757441"></p><p>成功🤞</p><h3 id="通过VsCode-ftp-连接接服务器"><a href="#通过VsCode-ftp-连接接服务器" class="headerlink" title="通过VsCode ftp 连接接服务器"></a>通过VsCode ftp 连接接服务器</h3><p>vscode安装插件<code>sftp</code></p><p><code>ctrl+shift+p</code>搜索<code>sftp:Config</code></p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572106834768.png" alt="1572106834768"></p><p>配置config，用法字面意思能看懂，更复杂配置搜文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Jason"</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"47.103.209.82"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"sftp"</span>,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line">    <span class="attr">"remotePath"</span>: <span class="string">"/home/frontend"</span>,</span><br><span class="line">    <span class="attr">"uploadOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"ignore"</span>: [</span><br><span class="line">        <span class="string">".vscode"</span>,</span><br><span class="line">        <span class="string">".git"</span>,</span><br><span class="line">        <span class="string">".DS_Store"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"syncOption"</span>: &#123;</span><br><span class="line">        <span class="attr">"delete"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"update"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"watcher"</span>: &#123;</span><br><span class="line">        <span class="attr">"files"</span>: <span class="string">"**/*"</span>,</span><br><span class="line">        <span class="attr">"autoUpload"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"autoDelete"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"privateKeyPath"</span>: <span class="string">"~/.ssh/id_rsa"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572145404172.png" alt="1572145404172"></p><p>右键可以拉取推送到服务器</p><h3 id="配置nginx-反向代理"><a href="#配置nginx-反向代理" class="headerlink" title="配置nginx 反向代理"></a>配置nginx 反向代理</h3><p>安装<code>yum install -y nginx</code></p><p>配置nginx.conf，监听服务器本地的5000端口，详细配置请看nginx文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># For more information on configuration, see:</span><br><span class="line">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class="line">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><span class="line"></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"># Load dynamic modules. See /usr/share/nginx/README.dynamic.</span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:3000;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推入服务器，修改为可执行权限</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572154533239.png" alt="1572154533239"></p><p>覆盖掉原来的nginx配置文件</p><p><code># cp nginx.conf /etc/nginx/nginx.conf</code></p><p>重启nginx</p><p><code># systemctl restart nginx</code></p><p>浏览器输入ip，返回nginx error说明已经配上了</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572154823450.png" alt="1572154823450"></p><p>在服务器安装个express</p><p><code>npm install express -S</code></p><p>测试一下</p><p>趴到本地，建一个index.js测试文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理静态文件</span></span><br><span class="line">app.use(express.static(<span class="string">'client/dist'</span>));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.sendFile(path.resolve(__dirname, <span class="string">'client'</span>, <span class="string">'dist'</span>, <span class="string">'index.html'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/api/datas'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">        name: <span class="string">'Jason'</span>,</span><br><span class="line">        wechat: <span class="string">'wjcyx99'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Server running on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>推到服务器，运行 <code>node index.js</code><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572156101543.png" alt="1572156101543"></p><p>浏览器查看结果，成功👍</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572156042839.png" alt="1572156042839"></p><h3 id="创建全局模块软链接"><a href="#创建全局模块软链接" class="headerlink" title="创建全局模块软链接"></a>创建全局模块软链接</h3><p>刚刚 <code>cnpm install -g @vue/cli</code>安装个vue脚手架</p><p>找到vue 在这里</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572157762872.png" alt="1572157762872"></p><p>放到全局，有效果</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572157803313.png" alt="1572157803313"></p><p>使用forever 后台运行</p><p><a href="https://github.com/foreversd/forever" target="_blank" rel="noopener">https://github.com/foreversd/forever</a></p><p><code>npm install forever -g</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ forever start app.js          #启动</span><br><span class="line">$ forever stop app.js           #关闭</span><br></pre></td></tr></table></figure><h3 id="打包上线"><a href="#打包上线" class="headerlink" title="打包上线"></a>打包上线</h3><p>实验做得差不多了，给我的CityMALL打包上线</p><h3 id="linux下安装mongodb"><a href="#linux下安装mongodb" class="headerlink" title="linux下安装mongodb"></a>linux下安装mongodb</h3><ol><li>在官方下找到下载路径,CentOS红帽子公司的</li></ol><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572253297039.png" alt="1572253297039"></p><p><code>wget 路径</code></p><ol start="2"><li>下载完后解压到这个目录，没有创建</li></ol><p><code>tar -zxvf mongodb-linux-x86_64-rhel70-4.2.1.tgz -C /usr/local/mongoDB/</code></p><p>名字太长了，改个名<code># mv mongodb-linux-x86_64-rhel70-4.2.1 mongodbserver</code></p><ol start="3"><li><p>创建data数据，log日志，etc配置 文件夹</p><p>创建配置文件mongodb.conf</p></li></ol><p><code>cd /usr/local/mongoDB/mongodbserver/etc</code></p><p><code>vim mongodb.conf</code></p><blockquote><p>从mongodb3.2开始默认的存储引擎是WiredTiger，3.3版本之前的默认存储引擎是MMAPv1，mongodb4.x版本不再支持MMAPv1存储引擎。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dbpath=/usr/local/mongoDB/mongodbserver/data/db #数据存放</span><br><span class="line">logpath=/usr/local/mongoDB/mongodbserver/data/logs/mongodb.log #日志存放</span><br><span class="line">port=27017 #端口</span><br><span class="line">logappend=true #追加方式写日志  </span><br><span class="line">noauth=true #不启用验证  </span><br><span class="line">fork=true #可在后台运行</span><br><span class="line">journal=true #每次写入会记录一条操作</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>添加环境变量</strong></li></ol><ul><li>在/etc/profile文件中，文末添加 export <code>vim /etc profile</code></li></ul><p><code>export PATH=$PATH:/usr/local/mongoDB/mongodbserver/bin</code></p><p>执行``source /etc/profile`，使系统环境变量立即生效</p><ul><li>将mongo路径软链到/usr/bin路径下，方便随处执行mongo命令</li></ul><p>执行命令: <code>ln -s /usr/local/mongoDB/mongodbserver/bin/mongo /usr/bin/mongo</code></p><p>通过配置文件运行，mongod</p><p><code># mongod --config /usr/local/mongoDB/mongodbserver/etc/mongodb.conf</code></p><p>运行mongo成功👍</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572262020655.png" alt="1572262020655"></p><p>到database 初始化mongoDB创建schema</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572442011030.png" alt="1572442011030"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"><span class="keyword">const</span> db = <span class="string">"mongodb://localhost/shoppingMall"</span></span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line">exports.initSchemas = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    glob.sync(resolve(__dirname, <span class="string">'./schema'</span>, <span class="string">'**/*.js'</span>)).forEach(<span class="built_in">require</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库导入，修正"><a href="#数据库导入，修正" class="headerlink" title="数据库导入，修正"></a>数据库导入，修正</h3><p>之前写了api，直接在浏览器中输入，执行命令</p><p>之前的白酒分类是错的把它修正</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572488999983.png" alt="1572488999983"></p><h3 id="老是出现node-modules错误"><a href="#老是出现node-modules错误" class="headerlink" title="老是出现node_modules错误"></a>老是出现node_modules错误</h3><p>windows<code>cnpm install rimraf -g</code></p><p><code>rm -f /node_modules</code></p><p>linux <code>rm -rf node_modules</code></p><p>一般都是把node_modules删除重新下载<code>cnpm install</code>，有些还不能删除强行移动文件夹就行了</p><h3 id="不挂断在后台运行"><a href="#不挂断在后台运行" class="headerlink" title="不挂断在后台运行"></a>不挂断在后台运行</h3><ol><li><p>nohup<br>nohup 是 no hang up 的缩写，就是不挂断的意思。nohup 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。</p></li><li><p>&amp;</p><p>&amp;是指在后台运行，但当用户推出(挂起)的时候，命令自动也跟着退出。</p></li></ol><p>使用命令 nohup COMMAND &amp; 这样就能使命令永久的执行下去，关闭终端窗口、Ctrl+c 、断开SSH连接都不会影响其运行，并且可以使用标准输入，终端能够接收任何输入，重定向标准输出和标准错误到当前目录下的nohup.out文件。</p><h3 id="前台打包成静态文件"><a href="#前台打包成静态文件" class="headerlink" title="前台打包成静态文件"></a>前台打包成静态文件</h3><p>​ <code>npm run build</code> 生成dist文件夹放入service，直接就可以使用了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> staticFiles = <span class="built_in">require</span>(<span class="string">'koa-static'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定 dist目录为静态资源目录，用来存放 js css images 等</span></span><br><span class="line">app.use(staticFiles(path.resolve(__dirname, <span class="string">"./dist"</span>)))</span><br></pre></td></tr></table></figure><p>在手机测试成功后心情豁然开朗😎</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/nodeToService/1572520037662.png" alt="1572520037662"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;服务器部署node教程（二）&quot;&gt;&lt;a href=&quot;#服务器部署node教程（二）&quot; class=&quot;headerlink&quot; title=&quot;服务器部署node教程（二）&quot;&gt;&lt;/a&gt;服务器部署node教程（二）&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;期间经历了很多坑，多数还是找到了解决办法，相信经历了第一次，以后就能孰能生巧了。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;安装最新的node-js环境&quot;&gt;&lt;a href=&quot;#安装最新的node-js环境&quot; class=&quot;headerlink&quot; title=&quot;安装最新的node.js环境&quot;&gt;&lt;/a&gt;安装最新的node.js环境&lt;/h3&gt;
    
    </summary>
    
    
      <category term="服务器部署" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="项目" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="部署" scheme="http://yoursite.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>几个笔试题总结</title>
    <link href="http://yoursite.com/2021/05/08/%E6%95%B0%E7%BE%8E%E7%A7%91%E6%8A%80%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2021/05/08/%E6%95%B0%E7%BE%8E%E7%A7%91%E6%8A%80%E7%AC%94%E8%AF%95%E9%A2%98/</id>
    <published>2021-05-08T10:26:41.014Z</published>
    <updated>2020-05-12T23:11:41.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="几个笔试题总结"><a href="#几个笔试题总结" class="headerlink" title="几个笔试题总结"></a>几个笔试题总结</h1><table><thead><tr><th>逻辑运算</th><th>实例</th><th>解释</th></tr></thead><tbody><tr><td>逻辑与，AND（<code>&amp;&amp;</code>）</td><td><code>expr1 &amp;&amp; expr2</code></td><td>若 <code>expr1</code> 可转换为 <code>true</code>，则返回 <code>expr2</code>；否则，返回 <code>expr1</code>。</td></tr><tr><td>逻辑或，OR（`</td><td></td><td>`）</td></tr></tbody></table><a id="more"></a><h3 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.val = <span class="number">1</span> <span class="comment">//全局 val 为 1</span></span><br><span class="line"><span class="keyword">var</span> json = &#123;</span><br><span class="line">  val: <span class="number">10</span>,</span><br><span class="line">  dbl: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val *= <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">json.dbl() <span class="comment">// json.val 为 20 ，this指向调用对象json</span></span><br><span class="line"><span class="keyword">var</span> dbl = json.dbl</span><br><span class="line">dbl() <span class="comment">// window.val 为 2 ， 赋值传递丢失绑定对象 this指向全局</span></span><br><span class="line">json.dbl.call(<span class="built_in">window</span>) <span class="comment">// window.val 为 4 ，ceindwall使this指向 window</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.val + json.val) <span class="comment">// 4 + 20 = 24</span></span><br></pre></td></tr></table></figure><hr><h3 id="JS执行顺序问题"><a href="#JS执行顺序问题" class="headerlink" title="JS执行顺序问题"></a>JS执行顺序问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Shumei'</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'undefined'</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'SM'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span> + name)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span> + name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">JS编译过程是这样的：</span><br><span class="line">先是声明变量不赋值 <span class="keyword">var</span> name;</span><br><span class="line">然后执行自执行函数 </span><br><span class="line">再name = <span class="string">'shumei'</span></span><br><span class="line"></span><br><span class="line">所以函数执行的时候 变量只声明 但是未赋值</span><br><span class="line">输出： helloSM</span><br></pre></td></tr></table></figure><hr><h3 id="数据类型原理问题"><a href="#数据类型原理问题" class="headerlink" title="数据类型原理问题"></a>数据类型原理问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> a2 = a1</span><br><span class="line">a1[<span class="number">0</span>] = a2[<span class="number">1</span>]</span><br><span class="line">a2.push(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a1)</span><br><span class="line"><span class="built_in">console</span>.log(a2)</span><br><span class="line"></span><br><span class="line">数组是引用数据类型，引用数据类型在该对象在栈中存储的是引用地址，指向内存堆中真实的数据。</span><br><span class="line">所以说如果是引用类型数据的新赋值，会影响到原数据。</span><br><span class="line">输出：</span><br><span class="line">[ <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line">[ <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br></pre></td></tr></table></figure><hr><h3 id="JS继承问题"><a href="#JS继承问题" class="headerlink" title="JS继承问题"></a>JS继承问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">if</span>(age != <span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Test.prototype = &#123;</span><br><span class="line">    name: <span class="string">'SM'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="built_in">console</span>.log(instance.name); <span class="comment">// undefine</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.age);  <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.constructor);  <span class="comment">// [Function: object]</span></span><br></pre></td></tr></table></figure><hr><h3 id="双等转化问题"><a href="#双等转化问题" class="headerlink" title="双等转化问题"></a>双等转化问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">"false"</span>))</span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log([] == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//false </span></span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><hr><h3 id="JS异步同步问题"><a href="#JS异步同步问题" class="headerlink" title="JS异步同步问题"></a>JS异步同步问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123; <span class="comment">// 这里不是逗号</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>) &#123;</span><br><span class="line">  i++;</span><br><span class="line">  i == <span class="number">1</span> &amp;&amp; resolve(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p><strong>答案及解释：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">涉及异步同步，宏任务微任务</span><br><span class="line">先执行JS引擎线程全局宏任务 输出 <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> </span><br><span class="line">然后执行 清空微任务 then 后的 输出 <span class="number">4</span> </span><br><span class="line">再执行宏任务 定时器线程执行完 然后回调到事件队列 输出 <span class="number">1</span> </span><br><span class="line">输出：</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;几个笔试题总结&quot;&gt;&lt;a href=&quot;#几个笔试题总结&quot; class=&quot;headerlink&quot; title=&quot;几个笔试题总结&quot;&gt;&lt;/a&gt;几个笔试题总结&lt;/h1&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;逻辑运算&lt;/th&gt;&lt;th&gt;实例&lt;/th&gt;&lt;th&gt;解释&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;逻辑与，AND（&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;）&lt;/td&gt;&lt;td&gt;&lt;code&gt;expr1 &amp;amp;&amp;amp; expr2&lt;/code&gt;&lt;/td&gt;&lt;td&gt;若 &lt;code&gt;expr1&lt;/code&gt; 可转换为 &lt;code&gt;true&lt;/code&gt;，则返回 &lt;code&gt;expr2&lt;/code&gt;；否则，返回 &lt;code&gt;expr1&lt;/code&gt;。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;逻辑或，OR（`&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;`）&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数组方法整理</title>
    <link href="http://yoursite.com/2021/05/08/%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2021/05/08/%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</id>
    <published>2021-05-08T10:26:41.013Z</published>
    <updated>2020-01-19T08:15:41.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组方法整理"><a href="#数组方法整理" class="headerlink" title="数组方法整理"></a>数组方法整理</h1><blockquote><p>要操作数据的时候，数组一堆方法把我搞混沌了，每次都要查一下资料，干脆整理一下</p></blockquote><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><blockquote><p><code>forEach()</code> 方法对数组的每个元素执行一次提供的函数。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">mdn</a></p></blockquote><a id="more"></a><p><strong>不会返回执行结果</strong>，返回的是<code>undefined</code>，也就是说，<code>forEach()</code><strong>会修改原来的数组</strong>，中途<strong>不能</strong>用常规操作<strong>跳出循环</strong>，不支持<strong>链式</strong>操作，forEach之前可以链式</p><p>当数组中元素是<strong>值</strong>类型，forEach<strong>不会改变</strong>数组；当是<strong>引用</strong>类型，则<strong>可以改变</strong>数组</p><h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><blockquote><p><code>map()</code> 方法创建一个<strong>新数组</strong>，其结果是该数组中的每个元素都调用一个提供的函数后<strong>返回的结果</strong>。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">mdn</a></p></blockquote><p><code>map()</code>方法会得到一个<strong>新的数组</strong>并返回。速度更快，必须要有return。</p><hr><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><blockquote><p><code>filter()</code> 方法创建一个<strong>新数组</strong>，其包含<strong>通过</strong>所提供函数实现的<strong>测试</strong>的所有元素。</p></blockquote><hr><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><blockquote><p><code>sort()</code> 方法用<a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">原地算法</a>对数组的元素进行排序，并返回数组。默认按Unicode升序</p></blockquote><p><strong>它直接改变原始数组</strong></p><p>要比较数字而非字符串，比较函数可以简单的以 <strong>a 减 b</strong>，如下的函数将会将数组<strong>升序</strong>排列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>]; </span><br><span class="line">numbers.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); </span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><hr><h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><blockquote><p><code>some()</code> 方法测试数组中是不是至少有<strong>1个元素通过</strong>了被提供的函数测试。它返回的是一个Boolean类型的值。</p></blockquote><p>只要有一个满足即返回true，之后的不再执行</p><h3 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h3><blockquote><p><code>every()</code> 方法测试一个数组内的所有元素是否<strong>都</strong>能通过某个指定函数的测试。它返回一个布尔值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'Jason'</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'cecilia'</span>, <span class="attr">age</span>: <span class="number">19</span>&#125;</span><br><span class="line">].every(<span class="function"><span class="params">item</span> =&gt;</span> item.age &gt; <span class="number">19</span>)</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><blockquote><p><code>find()</code> 方法返回数组中<strong>满足提供的测试函数</strong>的<strong>第一个</strong>元素的值。否则返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" target="_blank" rel="noopener"><code>undefined</code></a>。</p></blockquote><p><code>findIndex()</code>方法返回数组中满足提供的测试函数的<strong>第一个</strong>元素的<strong>索引</strong>。否则返回-1。</p><hr><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><blockquote><p>对数组中的每个元素执行一个由您提供的<strong>reducer</strong>函数(升序执行)，将其结果汇总为单个返回值。</p></blockquote><ul><li>accumulator 累计器</li><li>currentValue 当前值</li><li>currentIndex 当前索引(可选)</li><li>array 数组（可选）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduce(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> prev + curr );</span><br></pre></td></tr></table></figure><p>如果你打算提供一个初始值作为<code>reduce()</code>方法的第二个参数，以下是运行过程及结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) =&gt; &#123; return accumulator + currentValue; &#125;, 10 );</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left"><code>callback</code></th><th align="left"><code>accumulator</code></th><th align="left"><code>currentValue</code></th><th align="left"><code>currentIndex</code></th><th align="left"><code>array</code></th><th align="left">return value</th></tr></thead><tbody><tr><td align="left">first call</td><td align="left"><code>10</code></td><td align="left"><code>0</code></td><td align="left"><code>0</code></td><td align="left"><code>[0, 1, 2, 3, 4]</code></td><td align="left"><code>10</code></td></tr><tr><td align="left">second call</td><td align="left"><code>10</code></td><td align="left"><code>1</code></td><td align="left"><code>1</code></td><td align="left"><code>[0, 1, 2, 3, 4]</code></td><td align="left"><code>11</code></td></tr><tr><td align="left">third call</td><td align="left"><code>11</code></td><td align="left"><code>2</code></td><td align="left"><code>2</code></td><td align="left"><code>[0, 1, 2, 3, 4]</code></td><td align="left"><code>13</code></td></tr><tr><td align="left">fourth call</td><td align="left"><code>13</code></td><td align="left"><code>3</code></td><td align="left"><code>3</code></td><td align="left"><code>[0, 1, 2, 3, 4]</code></td><td align="left"><code>16</code></td></tr><tr><td align="left">fifth call</td><td align="left"><code>16</code></td><td align="left"><code>4</code></td><td align="left"><code>4</code></td><td align="left"><code>[0, 1, 2, 3, 4]</code></td><td align="left"><code>20</code></td></tr></tbody></table><p>这种情况下<code>reduce()</code>返回的值是<code>20</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数组方法整理&quot;&gt;&lt;a href=&quot;#数组方法整理&quot; class=&quot;headerlink&quot; title=&quot;数组方法整理&quot;&gt;&lt;/a&gt;数组方法整理&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;要操作数据的时候，数组一堆方法把我搞混沌了，每次都要查一下资料，干脆整理一下&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;forEach&quot;&gt;&lt;a href=&quot;#forEach&quot; class=&quot;headerlink&quot; title=&quot;forEach()&quot;&gt;&lt;/a&gt;forEach()&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;forEach()&lt;/code&gt; 方法对数组的每个元素执行一次提供的函数。&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mdn&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>抽离首页小卡片组件</title>
    <link href="http://yoursite.com/2021/05/08/%E6%8A%BD%E7%A6%BB%E9%A6%96%E9%A1%B5%E5%B0%8F%E5%8D%A1%E7%89%87/"/>
    <id>http://yoursite.com/2021/05/08/%E6%8A%BD%E7%A6%BB%E9%A6%96%E9%A1%B5%E5%B0%8F%E5%8D%A1%E7%89%87/</id>
    <published>2021-05-08T10:26:41.011Z</published>
    <updated>2019-12-21T12:15:14.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抽离首页小卡片组件"><a href="#抽离首页小卡片组件" class="headerlink" title="抽离首页小卡片组件"></a>抽离首页小卡片组件</h1><h3 id="dpr不同-获取图片倍数问题"><a href="#dpr不同-获取图片倍数问题" class="headerlink" title="dpr不同 获取图片倍数问题"></a>dpr不同 获取图片倍数问题</h3><p>之前的代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">storage-info-bg-mixin</span><span class="params">(dpr)</span></span></span><br><span class="line">      <span class="variable">$dpr</span> = <span class="string">"@"</span> + dpr</span><br><span class="line">      &amp;-lun</span><br><span class="line">          <span class="attribute">background</span> url(<span class="string">"../img/LUN"</span> + <span class="variable">$dpr</span> + <span class="string">".png"</span>) no-repeat left</span><br><span class="line">      &amp;-server</span><br><span class="line">          <span class="attribute">background</span> url(<span class="string">"../img/server"</span> + <span class="variable">$dpr</span> + <span class="string">".png"</span>) no-repeat left</span><br><span class="line">      &amp;-file</span><br><span class="line">          <span class="attribute">background</span> url(<span class="string">"../img/file"</span> + <span class="variable">$dpr</span> + <span class="string">".png"</span>) no-repeat left</span><br><span class="line">      &amp;-cifsshare</span><br><span class="line">          <span class="attribute">background</span> url(<span class="string">"../img/diskcifs"</span> + <span class="variable">$dpr</span> + <span class="string">".png"</span>) no-repeat center</span><br><span class="line">      &amp;-nfsshare</span><br><span class="line">          <span class="attribute">background</span> url(<span class="string">"../img/disknfs"</span> + <span class="variable">$dpr</span> + <span class="string">".png"</span>) no-repeat center</span><br><span class="line">      &amp;-ftpshare</span><br><span class="line">          <span class="attribute">background</span> url(<span class="string">"../img/diskftp"</span> + <span class="variable">$dpr</span> + <span class="string">".png"</span>) no-repeat center</span><br><span class="line">      &amp;-object</span><br><span class="line">          <span class="attribute">background</span> url(<span class="string">"../img/object"</span> + <span class="variable">$dpr</span> + <span class="string">".png"</span>) no-repeat left</span><br><span class="line">      &amp;-rent</span><br><span class="line">          <span class="attribute">background</span> url(<span class="string">"../img/rent"</span> + <span class="variable">$dpr</span> + <span class="string">".png"</span>) no-repeat left</span><br><span class="line">      &amp;-bucket</span><br><span class="line">          <span class="attribute">background</span> url(<span class="string">"../img/bucket"</span> + <span class="variable">$dpr</span> + <span class="string">".png"</span>) no-repeat left</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对所有的mixin再做一层mixin</span></span><br><span class="line">  media-mixin(mixin)</span><br><span class="line">      mixin(<span class="string">'1x'</span>)</span><br><span class="line">      @media screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>),  screen and (min--moz-device-pixel-ratio: <span class="number">2</span>)</span><br><span class="line">          mixin(<span class="string">'2x'</span>)</span><br><span class="line">      @media screen and (-webkit-min-device-pixel-ratio: <span class="number">3</span>),  screen and (min--moz-device-pixel-ratio: <span class="number">3</span>)</span><br><span class="line">          mixin(<span class="string">'3x'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p>非常的繁琐,每个不同图片的都要添加一行，还用到了stylus <code>mixin</code>嵌套难以理解</p><p><strong>我的方式</strong></p><p>首先在父组件获取屏幕dpr，防止有个别屏幕dpr不是整数，1.5，1.25什么的，取整，默认dpr为一</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getFloorDPR() &#123;</span><br><span class="line">    <span class="keyword">let</span> dpr = <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">    <span class="keyword">let</span> dprMin = <span class="number">1</span>,</span><br><span class="line">        dprMax = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(dpr &gt;= dprMin &amp;&amp; dpr &lt; dprMax) &#123;</span><br><span class="line">        <span class="keyword">this</span>.dpr = <span class="built_in">Math</span>.floor(dpr) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件props，传入图片名即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    image: &#123;   <span class="comment">//传入[图片名 ，屏幕dpr]</span></span><br><span class="line">        type: <span class="built_in">Array</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> [<span class="string">'server'</span>, <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>style动态绑定背景图片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"storage-info-bg"</span> <span class="attr">:style</span>=<span class="string">"bgIcon"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在data中 得到传过来的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        bgIcon: &#123;</span><br><span class="line">            background: <span class="string">`url('/.../<span class="subst">$&#123;<span class="keyword">this</span>.image[<span class="number">0</span>]&#125;</span>@<span class="subst">$&#123;<span class="keyword">this</span>.image[<span class="number">1</span>]&#125;</span>x.png') no-repeat`</span> </span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">getShareCountTip () &#123;</span><br><span class="line">return `$&#123;_(&apos;共享目录&apos;)&#125;：` + `$&#123;this.getShareCount&#125;` + _(&apos;个&apos;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">getCifsShareCountTip () &#123;</span><br><span class="line">return `$&#123;_(&apos;CIFS目录&apos;)&#125;：` + `$&#123;this.cifsStore.cifs_share_dir_num || 0&#125;` + _(&apos;个&apos;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">getNfsShareCountTip () &#123;</span><br><span class="line">return `$&#123;_(&apos;NFS目录&apos;)&#125;：` + `$&#123;this.nfsStore.nfs_share_dir_num || 0&#125;` + _(&apos;个&apos;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">getFtpShareCountTip () &#123;</span><br><span class="line">return `$&#123;_(&apos;FTP目录&apos;)&#125;：` + `$&#123;this.ftpStore.ftp_share_dir_num || 0&#125;` + _(&apos;个&apos;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 对象总数</span><br><span class="line">getObjectTotalTip () &#123;</span><br><span class="line">return (`$&#123;_(&apos;对象总数&apos;)&#125;：` +</span><br><span class="line">`$&#123;this.objStore &amp;&amp; this.objStore.object_num || 0&#125;` +</span><br><span class="line">_(&apos;个&apos;));</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 用户账号</span><br><span class="line">getUsersTip () &#123;</span><br><span class="line">return (`$&#123;_(&apos;用户账号&apos;)&#125;：` +</span><br><span class="line">`$&#123;this.objStore &amp;&amp; this.objStore.user_num || 0&#125;` +</span><br><span class="line">_(&apos;个</span><br></pre></td></tr></table></figure><p>非常的繁琐,所以子组件简化为两个方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getCountTip() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">`<span class="subst">$&#123;_(<span class="keyword">this</span>.label)&#125;</span>：<span class="subst">$&#123;<span class="keyword">this</span>.count&#125;</span> <span class="subst">$&#123;_(<span class="string">'个'</span>)&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line">    getConnectTip() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">`<span class="subst">$&#123;_(<span class="string">'已连接'</span>)&#125;</span>：<span class="subst">$&#123;<span class="keyword">this</span>.connect&#125;</span> <span class="subst">$&#123;_(<span class="string">'个'</span>)&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="单位拆分"><a href="#单位拆分" class="headerlink" title="单位拆分"></a>单位拆分</h3><p><strong>原代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"number"</span>&gt;</span>&#123;&#123;showNumber(objStore &amp;&amp; objStore.object_num).val&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"unit"</span>&gt;</span><span class="tag">&lt;<span class="name">lang</span>&gt;</span>&#123;&#123;showNumber(objStore &amp;&amp; objStore.object_num).unit&#125;&#125;<span class="tag">&lt;/<span class="name">lang</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每次返回个对象，每次都要调用两次方法，非常别扭，substr这个方法MDN说已经块要废弃了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">showNumber (num) &#123;</span><br><span class="line">    <span class="keyword">let</span> showNum = numSize(num || <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (showNum &amp;&amp; !lodash.isNumber(showNum))&#123;</span><br><span class="line">        <span class="keyword">let</span> numPosition = showNum.search(<span class="regexp">/万|亿/g</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            val: showNum.substr(<span class="number">0</span>, numPosition),</span><br><span class="line">            unit: showNum.substr(numPosition)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        val: showNum,</span><br><span class="line">        unit: _(<span class="string">'个'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><hr><p><strong>我的优化</strong>：正则优化 使用 <code>split</code>，然后把计算放入data，template直接取，避免重复调用方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"number"</span>&gt;</span>&#123;&#123;unitValue[0]&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"number-unit"</span>&gt;</span>&#123;&#123;unitValue[1]&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">showNumber() &#123;</span><br><span class="line">    <span class="keyword">let</span> showNum = numSize(<span class="keyword">this</span>.count);</span><br><span class="line">    lodash.isNumber(showNum)</span><br><span class="line">        ? <span class="keyword">this</span>.unitValue = [showNum, _(<span class="string">'个'</span>)]</span><br><span class="line">        : <span class="keyword">this</span>.unitValue = showNum.split(<span class="regexp">/(万|亿)/g</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;抽离首页小卡片组件&quot;&gt;&lt;a href=&quot;#抽离首页小卡片组件&quot; class=&quot;headerlink&quot; title=&quot;抽离首页小卡片组件&quot;&gt;&lt;/a&gt;抽离首页小卡片组件&lt;/h1&gt;&lt;h3 id=&quot;dpr不同-获取图片倍数问题&quot;&gt;&lt;a href=&quot;#dpr不同-获取图片倍数问题&quot; class=&quot;headerlink&quot; title=&quot;dpr不同 获取图片倍数问题&quot;&gt;&lt;/a&gt;dpr不同 获取图片倍数问题&lt;/h3&gt;&lt;p&gt;之前的代码：&lt;/p&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;storage-info-bg-mixin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dpr)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;variable&quot;&gt;$dpr&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;@&quot;&lt;/span&gt; + dpr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;amp;-lun&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt; url(&lt;span class=&quot;string&quot;&gt;&quot;../img/LUN&quot;&lt;/span&gt; + &lt;span class=&quot;variable&quot;&gt;$dpr&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;.png&quot;&lt;/span&gt;) no-repeat left&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;amp;-server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt; url(&lt;span class=&quot;string&quot;&gt;&quot;../img/server&quot;&lt;/span&gt; + &lt;span class=&quot;variable&quot;&gt;$dpr&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;.png&quot;&lt;/span&gt;) no-repeat left&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;amp;-file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt; url(&lt;span class=&quot;string&quot;&gt;&quot;../img/file&quot;&lt;/span&gt; + &lt;span class=&quot;variable&quot;&gt;$dpr&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;.png&quot;&lt;/span&gt;) no-repeat left&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;amp;-cifsshare&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt; url(&lt;span class=&quot;string&quot;&gt;&quot;../img/diskcifs&quot;&lt;/span&gt; + &lt;span class=&quot;variable&quot;&gt;$dpr&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;.png&quot;&lt;/span&gt;) no-repeat center&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;amp;-nfsshare&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt; url(&lt;span class=&quot;string&quot;&gt;&quot;../img/disknfs&quot;&lt;/span&gt; + &lt;span class=&quot;variable&quot;&gt;$dpr&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;.png&quot;&lt;/span&gt;) no-repeat center&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;amp;-ftpshare&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt; url(&lt;span class=&quot;string&quot;&gt;&quot;../img/diskftp&quot;&lt;/span&gt; + &lt;span class=&quot;variable&quot;&gt;$dpr&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;.png&quot;&lt;/span&gt;) no-repeat center&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;amp;-object&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt; url(&lt;span class=&quot;string&quot;&gt;&quot;../img/object&quot;&lt;/span&gt; + &lt;span class=&quot;variable&quot;&gt;$dpr&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;.png&quot;&lt;/span&gt;) no-repeat left&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;amp;-rent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt; url(&lt;span class=&quot;string&quot;&gt;&quot;../img/rent&quot;&lt;/span&gt; + &lt;span class=&quot;variable&quot;&gt;$dpr&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;.png&quot;&lt;/span&gt;) no-repeat left&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;amp;-bucket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt; url(&lt;span class=&quot;string&quot;&gt;&quot;../img/bucket&quot;&lt;/span&gt; + &lt;span class=&quot;variable&quot;&gt;$dpr&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;.png&quot;&lt;/span&gt;) no-repeat left&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 对所有的mixin再做一层mixin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  media-mixin(mixin)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mixin(&lt;span class=&quot;string&quot;&gt;&#39;1x&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @media screen and (-webkit-min-device-pixel-ratio: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;),  screen and (min--moz-device-pixel-ratio: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          mixin(&lt;span class=&quot;string&quot;&gt;&#39;2x&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @media screen and (-webkit-min-device-pixel-ratio: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;),  screen and (min--moz-device-pixel-ratio: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          mixin(&lt;span class=&quot;string&quot;&gt;&#39;3x&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="组件提取" scheme="http://yoursite.com/categories/%E7%BB%84%E4%BB%B6%E6%8F%90%E5%8F%96/"/>
    
    
      <category term="组件" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"/>
    
      <category term="抽象" scheme="http://yoursite.com/tags/%E6%8A%BD%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>总算把你JS原型搞懂了</title>
    <link href="http://yoursite.com/2021/05/08/%E6%80%BB%E7%AE%97%E6%8A%8A%E4%BD%A0JS%E5%8E%9F%E5%9E%8B%E6%90%9E%E6%87%82%E4%BA%86/"/>
    <id>http://yoursite.com/2021/05/08/%E6%80%BB%E7%AE%97%E6%8A%8A%E4%BD%A0JS%E5%8E%9F%E5%9E%8B%E6%90%9E%E6%87%82%E4%BA%86/</id>
    <published>2021-05-08T10:26:41.010Z</published>
    <updated>2019-12-01T02:19:49.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="彻底搞明白JS原型"><a href="#彻底搞明白JS原型" class="headerlink" title="彻底搞明白JS原型"></a>彻底搞明白JS原型</h1><blockquote><p>一周考核中的JS原理题，表面checklist 实则考察Javascript原理，里面有很多题目没有理解，一个一个深挖，理解透，先把JS原型挖透</p></blockquote><a id="more"></a><p>第一次做题的时候只做做对了四分之一，整个人对JavaScript这门语言又懵逼了。跑了三遍案例才过90分，痛定思痛一定要搞明白其中的原理。</p><p>周六便在公司专门找JS原型的文章看。发现涉及的JS其他知识点也有很多。先去了解查看prototype是什么，中途又去看new的理念，接着又是this指向。</p><p>其实这些知识点零零散散在论坛公众号都有看，但是看了似乎懂了，一知半解过几天又忘，感觉JS就像充满未知的无底洞。</p><p>用自己的语言总结一下，时不时复习应该能理解更深。</p><h3 id="new问题"><a href="#new问题" class="headerlink" title="new问题"></a>new问题</h3><p>关键字 <code>new</code> 跟着一个含参函数，用于告知浏览器我们想要创建一个对象</p><p>在调用函数前加一个 <code>new</code> ，它就会返回一个这个函数的实例化<strong>对象</strong>. 然后，就可以在这个对象上面添加一些属性 。</p><p>每次<code>new</code>都会开辟出新的一个堆。</p><ol><li>新生成了一个对象</li><li>链接到原型</li><li>绑定 this</li><li>返回新对象</li></ol><h3 id="Javascript各元素诞生"><a href="#Javascript各元素诞生" class="headerlink" title="Javascript各元素诞生"></a>Javascript各元素诞生</h3><p>__ proto __ 产生</p><p>当我们使用 <code>new</code> 操作符时，生成的实例对象拥有了 <code>_proto_</code>属性。</p><p>prototype 原型</p><p><a href="https://zhuanlan.zhihu.com/p/22989691" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22989691</a></p><p><img src="/images/loading.png" data-original="https://pic1.zhimg.com/v2-1b90d4ec60713acce99df0c498fff794_r.jpg" alt="preview"></p><p><img src="/images/loading.png" data-original="https://user-gold-cdn.xitu.io/2019/2/24/1691fc9305a0c6b0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="proto-与prototype"><a href="#proto-与prototype" class="headerlink" title="_ proto_ 与prototype"></a>_ <em>proto_</em> 与prototype</h3><p><img src="/images/loading.png" data-original="https://user-gold-cdn.xitu.io/2019/4/11/16a0b8d871768297?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="整体的联系"></p><p>我们需要牢记两点：①<code>__proto__</code>和<code>constructor</code>属性是<strong>对象</strong>所独有的；② <code>prototype</code>属性是<strong>函数</strong>所独有的。但是由于JS中函数也是一种对象，所以函数也拥有<code>__proto__</code>和<code>constructor</code>属性，这点是致使我们产生困惑的很大原因之一</p><hr><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p><strong>我们知道 apply() 和 call() 都是为了改变某个函数运行时的上下文而存在的（就是为了改变函数内部的 this 指向）</strong>。然后，因为这两个方法会立即调用，所以为了弥补它们的缺失，还有个方法 <code>bind()</code>，它不会立即调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fn = &#123;</span><br><span class="line">    num: <span class="number">2</span>,</span><br><span class="line">    fun: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>).onclick = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span><br><span class="line">      &#125;).bind(<span class="keyword">this</span>);</span><br><span class="line">      <span class="comment">// &#125;).call(this);</span></span><br><span class="line">      <span class="comment">// &#125;).apply(this);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 这里的 this 是 fun，所以可以正确地访问 num,</span></span><br><span class="line"><span class="comment">     * 如果使用 bind()，会在点击之后打印 2；</span></span><br><span class="line"><span class="comment">     * 如果使用 call() 或者 apply()，那么在刷新网页的时候就会打印 2</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  &#125;</span><br><span class="line">  fn.fun();</span><br></pre></td></tr></table></figure><h3 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    a = <span class="number">100</span>,</span><br><span class="line">    log:<span class="function"><span class="params">b</span>=&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    log2:<span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.log()  <span class="comment">// 指向global</span></span><br><span class="line">obj.log2() <span class="comment">// 指向obj</span></span><br></pre></td></tr></table></figure><p>箭头函数的this与创建时的封闭词法上下文的this保持一致。</p><p><strong><code>this</code> 总是指向调用它所在方法的对象</strong></p><ul><li><strong>一般 this 指向问题，会发生在回调函数中。所以我们在写回调函数时，要注意一下 this 的指向问题。</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  birth: 1995,</span><br><span class="line">  getAge: function() &#123;</span><br><span class="line">    var b = this.birth; // 1995;</span><br><span class="line">    var fn = function() &#123;</span><br><span class="line">      return this.birth; </span><br><span class="line">    &#125;;</span><br><span class="line">    return fn();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.getAge(); // undefined</span><br></pre></td></tr></table></figure><p><code>fn</code> 中的 <code>this</code> 指向变成 <code>undefined</code> 了。<br>因为这里重新定义了个 function,有一个新的函数上下文,</p><p>通过<code>call()</code>修正this指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  birth: <span class="number">1999</span>,</span><br><span class="line">  getAge: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="keyword">this</span>.birth; <span class="comment">// 1999</span></span><br><span class="line">    <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.birth; </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> fn.call(obj); <span class="comment">// 通过 call()，将 obj 的 this 指向了 fn 中</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.getAge(); <span class="comment">// 1999</span></span><br></pre></td></tr></table></figure><p>也可以把上个this复值 <code>that = this</code></p><p>也可以使用箭头函数，箭头函数引用父级上下文</p><hr><h3 id="搞明白之后，可以自信解题了"><a href="#搞明白之后，可以自信解题了" class="headerlink" title="搞明白之后，可以自信解题了"></a>搞明白之后，可以自信解题了</h3><p>在网上搞了几个类似的题目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">A.prototype.n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> A();</span><br><span class="line">A.prototype = &#123;</span><br><span class="line">  n: <span class="number">2</span>,</span><br><span class="line">  m: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b.n);</span><br><span class="line"><span class="built_in">console</span>.log(b.m);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c.n);</span><br><span class="line"><span class="built_in">console</span>.log(c.m);</span><br></pre></td></tr></table></figure><p>A.prototype 函数的原型对象上增个 {n： 1}</p><p>然后c的原型对象被重新定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">undefine</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F();</span><br><span class="line"></span><br><span class="line">f.a();</span><br><span class="line">f.b();</span><br><span class="line"></span><br><span class="line">F.a();</span><br><span class="line">F.b();</span><br></pre></td></tr></table></figure><p>对象的原型对象 为 <strong>神对象</strong> 加一个输出a的函数</p><p>函数的原型对象 <strong>机器对象</strong> 加一个输出b的函数</p><p>f为函数F的实例化对象</p><p>函数的原型对象 <strong>机器</strong> 通过原型链找到对象的原型对象 <strong>神</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">error<span class="string">`not a function`</span></span><br><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'Jason'</span>);</span><br></pre></td></tr></table></figure><p>问题1：1.<code>p.__proto__</code>等于什么？</p><p>p为Person的实例化对象，就是<code>Person.Prototype</code></p><p>问题2：<code>Person.__proto__</code>等于什么？</p><p>函数 对象原型 <strong>机器</strong><code>Fuction.Prototype</code></p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;&#125;,</span><br><span class="line">    F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.prototype.a = <span class="string">'value a'</span>;</span><br><span class="line"><span class="built_in">Function</span>.prototype.b = <span class="string">'value b'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo.a);</span><br><span class="line"><span class="built_in">console</span>.log(foo.b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(F.a);</span><br><span class="line"><span class="built_in">console</span>.log(F.b)</span><br></pre></td></tr></table></figure><p>函数原型对象 <strong>机器</strong> 通过 原型链 找到对象原型对象 <strong>神</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">undefine</span><br><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure><hr><p>在开始的时候，看着看着会看晕了</p><p>连续看了无数文章解析，自己敲，单步调试多次后，我仿佛打通了JS二脉，对JS原型有了自己的理解。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;彻底搞明白JS原型&quot;&gt;&lt;a href=&quot;#彻底搞明白JS原型&quot; class=&quot;headerlink&quot; title=&quot;彻底搞明白JS原型&quot;&gt;&lt;/a&gt;彻底搞明白JS原型&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;一周考核中的JS原理题，表面checklist 实则考察Javascript原理，里面有很多题目没有理解，一个一个深挖，理解透，先把JS原型挖透&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript原理" scheme="http://yoursite.com/tags/javascript%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>小程序云开发学习入门</title>
    <link href="http://yoursite.com/2021/05/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2021/05/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-08T10:26:41.009Z</published>
    <updated>2020-02-06T12:43:28.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小程序云开发学习"><a href="#小程序云开发学习" class="headerlink" title="小程序云开发学习"></a>小程序云开发学习</h1><blockquote><p>朋友圈看到了迷渡大哥说当这次小程序云开发的评委。疫情这么严重，在家闲的慌，想参加一下这个黑客马拉松，刺激一下自己</p></blockquote><a id="more"></a><h3 id="开始创建"><a href="#开始创建" class="headerlink" title="开始创建"></a>开始创建</h3><p>使用小程序开发者工具，创建新项目，点击云开发</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/cloud/image-20200202214400410.png" alt="image-20200202214400410"></p><h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><p>右击创建login函数</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/cloud/image-20200202215513556.png" alt="image-20200202215513556"></p><h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><p>点击上传图片，在云开发控制台，可以看到</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/cloud/image-20200202220032800.png" alt="image-20200202220032800"></p><h3 id="前端操作数据库"><a href="#前端操作数据库" class="headerlink" title="前端操作数据库"></a>前端操作数据库</h3><p>先在云开发里创建一个集合，然后找到databaseGuide文件，取消onAdd函数的注释，</p><p>点击左侧新增记录，就会有显示，<strong>注意数据库名称要跟函数对的上</strong></p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/cloud/image-20200202221042328.png" alt="image-20200202221042328"></p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/cloud/image-20200202221321531.png" alt="image-20200202221321531"></p><h2 id="遗憾"><a href="#遗憾" class="headerlink" title="遗憾"></a>遗憾</h2><p>最后还是没有参加此次黑客马拉松，第一云开发才刚刚有做了解，并没有相关经验，并且在群里组队失败。没有队友。自己一个人两天肯定无法完成任务，所以放弃了。😵</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;小程序云开发学习&quot;&gt;&lt;a href=&quot;#小程序云开发学习&quot; class=&quot;headerlink&quot; title=&quot;小程序云开发学习&quot;&gt;&lt;/a&gt;小程序云开发学习&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;朋友圈看到了迷渡大哥说当这次小程序云开发的评委。疫情这么严重，在家闲的慌，想参加一下这个黑客马拉松，刺激一下自己&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>小程序 &#39;冥想歇息&#39; 介绍文档</title>
    <link href="http://yoursite.com/2021/05/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%20&#39;%E5%86%A5%E6%83%B3%E6%AD%87%E6%81%AF&#39;%20%E4%BB%8B%E7%BB%8D%E6%96%87%E6%A1%A3%20/"/>
    <id>http://yoursite.com/2021/05/08/%E5%B0%8F%E7%A8%8B%E5%BA%8F%20&#39;%E5%86%A5%E6%83%B3%E6%AD%87%E6%81%AF&#39;%20%E4%BB%8B%E7%BB%8D%E6%96%87%E6%A1%A3%20/</id>
    <published>2021-05-08T10:26:41.008Z</published>
    <updated>2019-06-19T07:24:10.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小程序-‘冥想歇息’-介绍文档"><a href="#小程序-‘冥想歇息’-介绍文档" class="headerlink" title="小程序 ‘冥想歇息’ 介绍文档"></a>小程序 ‘冥想歇息’ 介绍文档</h1><p>—宸薇敏团队</p><p>简介：本程序想推广，用短暂休息和冥想来补充精神和提升学习工作效率。</p><h3 id="1-产品定位"><a href="#1-产品定位" class="headerlink" title="1.产品定位"></a>1.产品定位</h3><p>​ <strong>（1）需求分析</strong></p><a id="more"></a><p>​ 人们在工作学习过程中，往往忽视了休息，大部分人只关注当时的任务。长时间的工作后会感到疲惫，如果闷头继续，往往会使效率下降，产生厌倦感。</p><p>​ 通过网络调查问卷调查发现，有工作和学习任务的人中80%的没有有意识地休息。心理学研究人们无法集中精力太长时间，平均全神关注一个事物15分钟，普通工作两小时，效率就会直线下降。</p><p>​ 所以，我们想设计一个小程序，来改善工作学习效率，提高生活质量。当工作累了，打开小程序，完成短暂休息，继续工作，事半功倍。</p><p>​ <strong>（2）产品方案</strong></p><p>​ 有了目标我们就要努力，但是那些好胜心强的人看起来似乎一点也不快乐。如果用一个小时或一个半小时的时间来专注做一件事，然后用15分钟左右来放松，恢复，可以是冥想也可以听音乐，健身。将时间分割成小块，我们也更容易获得成就感。维持生活的灵活性。聚焦工作，聚焦修整。</p><p>哈弗幸福公开课中，TalBen Shahar说到了保持高效工作与幸福生活最好地方法，其中注意到两点：</p><p>​ 1.冥想</p><p>​ 冥想跟自控力有着千丝万缕的联系。通过冥想提升自控力，也可以通过平时对自控力的训练提升冥想的效率。冥想是管理我们思维的一种方法，当我们在做冥想练习时，看似什么也没做，其实我们大脑的某些构造已经因为冥想而产生了变化，我们思维模式，觉知及感受也相应的产生了变化。</p><p>​ 冥想在美国已经被广泛运用到心理治疗中，特别是针对由创伤所引发的心理健康疾病，其中包括最为大家所熟悉的创伤后应激障碍（PTSD)。同时，冥想在治疗焦虑，抑郁，成瘾，强迫及冲动控制领域也有显著疗效。美国老兵协会近年来开始在老兵创伤治疗中加入冥想练习，多项研究结果显示冥想起到了大大减少创伤后应激障的多项相关病征。美国一些大型的创伤治疗研究中心也开始为心理治疗师开设针对创伤的冥想培训项目，以便为患者带来更多选择 (Steinberg &amp; Eisner, 2015）</p><p>​ Bruce Perry指出对这部分的神经系统提供重复性和有节奏的活动，都可以治疗和加强其功能。一些重复的，有节奏的体感活动包或舞蹈，呼吸，冥想，瑜伽等。这些活动可以大大减少焦虑，冲动，和其他由创伤带来的症状(Waechter, &amp; Wekerle 2014)。</p><p>​ 此外，有研究证明，连续8周练习冥想的正常人，其杏仁核的脑细胞体积明显变小，从而恐惧，压力，焦虑等也大大减缓；其海马体皮层厚度会增加，从而学习能力，记忆，创造力也相应增加 (Holzel, Carmody, Vangel, Congleton, Yerramsetti, Gard,&amp; Lazar,2011)</p><p>​ 2.短暂睡眠</p><p>​ 休息可以分很多形式，其中睡眠是最重要的投资。人们对于尚未处理完的事情，比已处理完的事情印象更加深刻。而睡眠是一个固化记忆的过程，往往思路不清的问题，大脑会在睡眠中处理。</p><p>​ 既然冥想和短时睡眠好处这么多，我们决定通过计时，记录来做这主要的两个功能。</p><p>​ 1.计时可以让用户感受时间流逝，延长心理时间，让用户专注于休息，而不是靠看碎片化信息，没有休息好，又消耗了时间。</p><p>​ 2.记录可以让用户了解最近休息情况，多次的休息记录让用户产生成就感。</p><p>​ 通过小程序即开即用的形式，当用户感到疲劳，即可使用冥想歇息，专注休息。调查问卷中，72%的用户休息是无意识的而且是玩手机刷抖音，微博。这样子使他们休息是无效的，而且大脑充斥大量无用刺激信息，进而影响接下来的专心工作学习。时间充裕的人往往能获得更多幸福感。请闭起眼睛，可以全神贯注地听喜欢的音乐，可以专注深呼吸。有时候，休息过程中会突现惊人的创造力。化学家门捷列夫试图寻找元素间的规律和统一，苦苦思寻，找不到答案，他在梦中梦见自己还在继续工作，仿佛自己梦见了元素周期表，醒来画下来这张表居然是完美的。</p><p>​ 心理学研究，物理时间是有限的，当专注于感受当下后，心理时间可以无限延长。歇息和冥想是一种很好的感受当下的方式。当代，手机与信息充斥着我们的脑子，很多人没有静下心来感受自己，放松休息了。所以我们仅仅是一个小程序，而是想推广一种健康，效率的生活方式。</p><h3 id="2-交互设计"><a href="#2-交互设计" class="headerlink" title="2.交互设计"></a>2.交互设计</h3><p>我们团队这一次小程序的整体色调选择的是粉色到灰色的渐变。因为我们小程序的主题是关于睡眠与冥想，这种渐变的颜色是让人心情放松，安抚情绪。粉色也是女性最喜欢的颜色。在粉红色的环境中小睡一会儿，能使人感到肌肉软弱 无力 ，而在蓝色中停留几秒钟，即可恢复。有人提出粉红色影响心理和生理的作用机制是：粉红色光刺激通过眼睛—大脑皮层—下丘脑—松果腺和脑垂体—肾上腺，使肾上腺髓质分泌 肾上腺素 减少，使得 心脏 活动舒缩变慢，肌肉放松。</p><p>利用渐变色椭圆层叠，位移制造出层次感，分离上下两块层区域。</p><p><img src="/images/loading.png" data-original="C:%5CUsers%5C%E5%90%B4%E4%BD%B3%E5%AE%B8%5CAppData%5CRoaming%5CTypora%5CdraftsRecover%5CbackTop.png" alt="backTop"></p><p>其图标我裁剪植物类型然后染出渐变主题色，植物也能让人心情舒适平静。图案非常简洁，简单与文艺风格，整体色调是蓝紫渐变色图标与上方背景相呼应。![img](file:///C:\Users\吴佳宸\Documents\Tencent Files\2249038142\Image\Group\Image14\JZHJ943{XGT767_RC~Y6K58.jpg)</p><p>简约风格，音乐背景图片可以左右滑动切换，当睡眠倒数时间开始后，圆周随时间变化蓝色呼吸灯缓慢缩放，使用户跟随呼吸灯的节奏，平静深呼吸。![img](file:///C:\Users\吴佳宸\Documents\Tencent Files\2249038142\Image\Group\Image14\AETBF1]RZX3CSO%{[S}4M`Q.jpg)</p><p>睡眠记录，冥想使用了![Green think](C:\Users\吴佳宸\AppData\Roaming\Typora\draftsRecover\Green think.png)灯泡图标表示思考到了什么，而睡眠部分使用的床左边灰色记录日期，右边黑色大字体记录时间。</p><p><img src="/images/loading.png" data-original="C:%5CUsers%5C%E5%90%B4%E4%BD%B3%E5%AE%B8%5CAppData%5CRoaming%5CTypora%5CdraftsRecover%5C1559064901953.png" alt="1559064901953"></p><h3 id="3-技术方案"><a href="#3-技术方案" class="headerlink" title="3.技术方案"></a>3.技术方案</h3><p>​ <strong>（1）程序框架图</strong></p><p><img src="/images/loading.png" data-original="C:%5CUsers%5C%E5%90%B4%E4%BD%B3%E5%AE%B8%5CAppData%5CRoaming%5CTypora%5CdraftsRecover%5C1559047200524.png" alt="1559047200524"></p><p>说明:总体为两个功能，冥想和睡眠 。其中的主要组件，计时组件。</p><p>​ <strong>（2）前端技术方案</strong></p><ul><li><p>技术选型：采用原生WXML,WXSS，JavaScript。</p></li><li><p>开发环境：使用微信原生框架，微信开发者工具，VS Code编辑器。</p></li><li><p>开发重难点：</p><p><strong><code>计时器组件</code></strong>：</p><ol><li><p>当时才学完es6还不了解设计模式，从小程序中了解到MVVM的一些思想，其核心是一个响应的数据绑定系统。整个系统分为两块：视图层(View) 和 逻辑层(App Service)。<br>这种模式可以让数据与视图保持同步非常简单。当做数据修改的时候，只需要在逻辑层修改数据，视图层就会做相应的更新。当睡眠时采用正计时，冥想时使用倒计时，两个页面复用一个组件。需要通过数据绑定的方式，页面传入逻辑层实现正倒计时。睡眠计时器从首页直接传入四个不同的时间。后台统计算的时间，也实时传入视图层。我们设了4个不同的睡眠时间，首页点击直接开始，减少用户操作步骤，操作的简单性，使用户快速进入休息状态，即开即用。</p></li><li><p>环形进度框，计时组件睡眠，团队讨论其时间大于一分钟时把秒数隐去，这样使用户专心于睡眠而不是看时间，为此我们加入了环形进度条来查看睡眠进度。</p><p>而普通的CSS没有圆形进度条，最后我想出一个解决办法，设俩个半圆，另一半遮住，这样当JS控制其旋转时，多余部分旋转隐藏，当总设定小于一半时间时，左边角度设为135度全部遮住，右边部分开始旋转。</p></li><li><p>滑动时会有不同的背景和音乐，调用滑动函数，音乐的url地址变换从而切换背景音乐，当时理所当然用了wx.BackgroundAudioManager()接口，而他的属性<strong>tring src</strong>：默认为空字符串，<strong>当设置了新的 src 时，会自动开始播放</strong>。当时为了解决自动播放的问题，让他获取到url后立即暂停pause()方法，可这个方法在滑动swiper时pause()方法不奏效，冥思苦想后，再看官方文档 wx.createInnerAudioContext()接口完美地解决了这个问题。</p></li><li><p>在睡眠倒计时中，如果用户没睡到设定的时间，会有一个确认弹窗，如果点返回会继续睡眠，自动调用开始函数。可这个函数的数据还是初始数据，这时候需要把数据重新覆盖，覆盖之后出现了问题，时间与圆形倒进度开始紊乱，逐一排查发现进度条是按重新覆盖的数据来减的，我们设减的刻度是360/总的时间，导入函数的总时间被覆盖，所以我在pageLifetimes: show函数中，赋一个变量把初始时间存放其中，这样原始数据不会被新数据干扰。</p><p><strong>（3）后端技术方案</strong></p><p>本次我们小组开发的是一个小歇息的小程序，因为主要以控制时间、良好睡眠为主。这次小程序的后台开发环境用的是PHP，用的是thinkphp框架设计的api，搭配的是MySQL数据库，为了保证良好的性能，服务器选择的是Nginx。</p><p>本次技术设计的首页设置了定位获取用户的天气预报。获取了百度天气的api接口，由经历前台传输用户的经纬度信息，传递给服务器端，获取用户的当地天气的信息，在传递给客户端，使客户端完成对前端首页的渲染。</p><p>其中对用户的一些基本信息也存储在数据库中，用户的信息主要用过调用微信的接口，通过微信为个人用户设计的code码，让小程序端传递code码来获取用户独有的openid。在后台为了保证用户的个人信息安全和用户体验，后台对用户的openid进行了加密和封装，使用户生成了一个唯一对应的token令牌，并把token令牌存储在数据库中，而不存储openid，保证了用户信息的安全。同时为了用户的加载体验，后台把用户的token和一些不涉及用户安全的信息存储在缓存中，以此来加快用户的二次访问速度。</p><p>小程序的首页的四个一键小睡和冥想，是由用户点击使用之后，由客户端实现对用户冥想和睡眠记录的收集，当用户结束冥想和结束小睡的时候，客户端会收集到用户冥想和小睡的时间。当获取到用户的小睡和冥想的时间后，客户端通过POST请求把用户的冥想和歇息的时间发给服务端，服务器再把用户的时间存储在服务器的MySQL中，完成对用户冥想和小睡时间的收集。同时在用户的信息页中，有冥想日志和睡眠日志，在冥想日志和睡眠日志中，小程序端通过用户的缓存来的token，通过POST请求来请求服务端，服务端获取用户在体验过小程序过后存储在数据库的冥想和小睡的数据，再反馈给小程序端，小程序端再完成对冥想日志和小睡日志的渲染。</p></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;小程序-‘冥想歇息’-介绍文档&quot;&gt;&lt;a href=&quot;#小程序-‘冥想歇息’-介绍文档&quot; class=&quot;headerlink&quot; title=&quot;小程序 ‘冥想歇息’ 介绍文档&quot;&gt;&lt;/a&gt;小程序 ‘冥想歇息’ 介绍文档&lt;/h1&gt;&lt;p&gt;—宸薇敏团队&lt;/p&gt;&lt;p&gt;简介：本程序想推广，用短暂休息和冥想来补充精神和提升学习工作效率。&lt;/p&gt;&lt;h3 id=&quot;1-产品定位&quot;&gt;&lt;a href=&quot;#1-产品定位&quot; class=&quot;headerlink&quot; title=&quot;1.产品定位&quot;&gt;&lt;/a&gt;1.产品定位&lt;/h3&gt;&lt;p&gt;​ &lt;strong&gt;（1）需求分析&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="产品介绍" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81%E4%BB%8B%E7%BB%8D/"/>
    
      <category term="小程序大赛" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%A4%A7%E8%B5%9B/"/>
    
      <category term="精华" scheme="http://yoursite.com/tags/%E7%B2%BE%E5%8D%8E/"/>
    
  </entry>
  
  <entry>
    <title>实现promise A+</title>
    <link href="http://yoursite.com/2021/05/08/%E5%AE%9E%E7%8E%B0promise%20A+/"/>
    <id>http://yoursite.com/2021/05/08/%E5%AE%9E%E7%8E%B0promise%20A+/</id>
    <published>2021-05-08T10:26:41.007Z</published>
    <updated>2020-01-20T04:05:06.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现promise-A"><a href="#实现promise-A" class="headerlink" title="实现promise A+"></a>实现promise A+</h1><blockquote><p><a href="https://promisesaplus.com/" target="_blank" rel="noopener">promiseA+规范</a>，研究了两天，看了几篇解析文章，跟着敲出来的，要是凭空自己写估计水平还没到，下面有我的解释</p></blockquote><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise的三个状态，pending =&gt; resolved or =&gt; reject, 不可逆</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span></span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">'resolved'</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递一个fn执行器,在try中执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span> (<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 防止this变向</span></span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">// 设开始状态为pending</span></span><br><span class="line">  that.state = PENDING</span><br><span class="line">  <span class="comment">// 用于保存 resolve 或者 reject 中传入参数的值</span></span><br><span class="line">  that.value = <span class="literal">null</span></span><br><span class="line">  <span class="comment">// 保存then中的回调</span></span><br><span class="line">  that.resolvedCallbacks = []</span><br><span class="line">  <span class="comment">// 失败的回调</span></span><br><span class="line">  that.rejectedCallbacks = []</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断传入的值是否为 Promise 类型</span></span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">      <span class="keyword">return</span> value.then(resolve, reject)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保证异步执行顺序</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (that.state === PENDING) &#123;</span><br><span class="line">        <span class="comment">// 改pending状态为 resolve</span></span><br><span class="line">        that.state = RESOLVED</span><br><span class="line">        <span class="comment">// 将传入的值赋值给 value</span></span><br><span class="line">        that.value = value</span><br><span class="line">        <span class="comment">// 遍历回调执行数组</span></span><br><span class="line">        that.resolvedCallbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn(that.value))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 同resolve</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (that.state === PENDING) &#123;</span><br><span class="line">        that.state = REJECTED</span><br><span class="line">        that.value = value</span><br><span class="line">        that.rejectedCallbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn(that.value))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    executor(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    reject(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// then方法</span></span><br><span class="line">MyPromise.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> promise2</span><br><span class="line">  <span class="comment">// 解决没有传值的问题，当参数不是函数类型时，需要创建一个函数赋值给对应的参数</span></span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">  onRejected =</span><br><span class="line">    <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span></span><br><span class="line">      ? onRejected</span><br><span class="line">      : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> reason</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="keyword">if</span> (that.state === PENDING) &#123;</span><br><span class="line">    <span class="comment">// 返回一个新的 promise 对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">promise2 = <span class="keyword">new</span> MyPromise((resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 往回调数组中 push 函数</span></span><br><span class="line">      that.resolvedCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 执行函数中可能 报错 ，try catch 捕获</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> x = onFulfilled(that.value)</span><br><span class="line">          resolutionProcedure(promise2, x, resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (r) &#123;</span><br><span class="line">          reject(r)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      that.rejectedCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> x = onRejected(that.value)</span><br><span class="line">          resolutionProcedure(promise2, x, resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (r) &#123;</span><br><span class="line">          reject(r)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (that.state === RESOLVED) &#123;</span><br><span class="line">    <span class="comment">// onFulfilled(that.value)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">promise2 = <span class="keyword">new</span> MyPromise((resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//因为穿透值的缘故，在默认的跑出一个error后，不能再用下一个的reject来接受，只能通过try，catch</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> x = onFulfilled(that.value)</span><br><span class="line">          <span class="comment">//递归 判断他们是否为promise对象</span></span><br><span class="line">          resolutionProcedure(promise2, x, resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (reason) &#123;</span><br><span class="line">          reject(reason)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (that.state === REJECTED) &#123;</span><br><span class="line">    <span class="comment">// onRejected(that.value)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">promise2 = <span class="keyword">new</span> MyPromise((resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> x = onRejected(that.value)</span><br><span class="line">          resolutionProcedure(promise2, x, resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (reason) &#123;</span><br><span class="line">          reject(reason)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolutionProcedure</span> (<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 避免循环引用</span></span><br><span class="line">  <span class="keyword">if</span> (x === promise2) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'循环引用'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 不是null ，是 对象 或 函数</span></span><br><span class="line">  <span class="keyword">if</span> (x != <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">'object'</span> || <span class="keyword">typeof</span> x === <span class="string">'function'</span>)) &#123;</span><br><span class="line">    <span class="comment">// called用于判断是否已经调用过函数</span></span><br><span class="line">    <span class="keyword">let</span> called = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> x.then === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="comment">// 参数 x 作为this指向</span></span><br><span class="line">        x.then.call(</span><br><span class="line">          x,</span><br><span class="line">          success =&gt; &#123;</span><br><span class="line">            <span class="comment">// 如果调用过 就直接返回了</span></span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 递归调用 .then 中是否还有子 promise</span></span><br><span class="line">            resolutionProcedure(promise2, success, resolve, reject)</span><br><span class="line">          &#125;,</span><br><span class="line">          err =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 错误直接返回</span></span><br><span class="line">            reject(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">      called = <span class="literal">true</span></span><br><span class="line">      reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果不是对象或函数将 x 传入resolve</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实现promise-A&quot;&gt;&lt;a href=&quot;#实现promise-A&quot; class=&quot;headerlink&quot; title=&quot;实现promise A+&quot;&gt;&lt;/a&gt;实现promise A+&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://promisesaplus.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;promiseA+规范&lt;/a&gt;，研究了两天，看了几篇解析文章，跟着敲出来的，要是凭空自己写估计水平还没到，下面有我的解释&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>实现call,apply,bind函数</title>
    <link href="http://yoursite.com/2021/05/08/%E5%AE%9E%E7%8E%B0call,apply,bind%E5%87%BD%E6%95%B0%20150429/"/>
    <id>http://yoursite.com/2021/05/08/%E5%AE%9E%E7%8E%B0call,apply,bind%E5%87%BD%E6%95%B0%20150429/</id>
    <published>2021-05-08T10:26:41.006Z</published>
    <updated>2020-01-30T04:17:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现call-apply-bind函数"><a href="#实现call-apply-bind函数" class="headerlink" title="实现call,apply,bind函数"></a>实现call,apply,bind函数</h1><ul><li>如果第一个参数为null ，则指向window</li><li>改变了 <code>this</code> 指向，让新的对象可以执行该函数，并能接受参数</li></ul><a id="more"></a><h3 id="复习this指向"><a href="#复习this指向" class="headerlink" title="复习this指向"></a>复习this指向</h3><p><strong>this永远指向最后一个调用这个方法的对象</strong></p><p>回顾<strong>隐式绑定</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'Jason'</span>,</span><br><span class="line">    getName()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//obj</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">//Jason</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.getName();</span><br></pre></td></tr></table></figure><p>记住这个用法，他们用这个实现</p><h3 id="实现call-apply"><a href="#实现call-apply" class="headerlink" title="实现call,apply"></a>实现call,apply</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (context) this指向的对象 (...args) 扩展运算 传入参数， (args)就是apply </span></span><br><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span>(<span class="params">context, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Error'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 改变this指向如果不传的话默认上下文为 window</span></span><br><span class="line">  context = context || <span class="built_in">window</span></span><br><span class="line">  args = args ? args : []</span><br><span class="line">  <span class="comment">// 定义一个唯一值</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Symbol</span>()</span><br><span class="line">  <span class="comment">// 把这个函数的this 写到call 对象的一个属性里</span></span><br><span class="line">  context[key] = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">// 通过“对象.方法（参数）”，可以把this指向对象</span></span><br><span class="line">  <span class="keyword">const</span> result = context[key](...args)</span><br><span class="line">  <span class="comment">// 删除对象添加的方法</span></span><br><span class="line">  <span class="keyword">delete</span> context[key]</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现bind"><a href="#实现bind" class="headerlink" title="实现bind"></a>实现bind</h3><p>bind返回一个绑定好的函数，不会立即执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fn = <span class="keyword">this</span></span><br><span class="line">    args = args ? args : []</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">newFn</span>(<span class="params">...newFnArgs</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 如果是new的就返回new</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> newFn) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> fn(...args, ...newFnArgs)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回一个apply方法</span></span><br><span class="line">        <span class="keyword">return</span> fn.apply(context, [...args,...newFnArgs])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实现call-apply-bind函数&quot;&gt;&lt;a href=&quot;#实现call-apply-bind函数&quot; class=&quot;headerlink&quot; title=&quot;实现call,apply,bind函数&quot;&gt;&lt;/a&gt;实现call,apply,bind函数&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;如果第一个参数为null ，则指向window&lt;/li&gt;&lt;li&gt;改变了 &lt;code&gt;this&lt;/code&gt; 指向，让新的对象可以执行该函数，并能接受参数&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>如何实现JS继承</title>
    <link href="http://yoursite.com/2021/05/08/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0JS%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2021/05/08/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0JS%E7%BB%A7%E6%89%BF/</id>
    <published>2021-05-08T10:26:41.005Z</published>
    <updated>2020-01-17T00:39:27.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何实现JS继承"><a href="#如何实现JS继承" class="headerlink" title="如何实现JS继承"></a>如何实现JS继承</h1><blockquote><p>JS是通过链式继承的，ES6的继承实际是语法糖。自己手动实现一下继承加深印象。</p></blockquote><p>es6之前是不支持接口直接继承的，所以就需要手动实现继承</p><a id="more"></a><p>通过这个图先熟悉一下JS内部，constructor和prototype和实例的关系</p><p><img src="/images/loading.png" data-original="E:%5CBlog%5Cpicture%5Cimage-20200115231115613.png" alt="image-20200115231115613"></p><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把父的实例化对象，赋值给 child的原型对象</span></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent()</span><br></pre></td></tr></table></figure><p>问题一: 当原型链中包含引用类型值的原型时,该引用类型值会被所有实例共享;</p><p>问题二: 在创建子类型(例如创建Child的实例)时,不能向父类型(例如Parent)的构造函数中传递参数.</p><h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// call只能继承属性，不能继承方法</span></span><br><span class="line">  Parent.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题一：父类中定义的方法,对子类型而言也是不可见的</p><p>问题二：方法都在构造函数中定义, 因此函数复用也就不可用了</p><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>使用<strong>原型链</strong>实现对原型<strong>属性和方法</strong>的继承,通过借用<strong>构造函数</strong>来实现对<strong>实例属性</strong>的继承.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent'</span></span><br><span class="line">  <span class="keyword">this</span>.play = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// call只能继承属性，不能继承方法</span></span><br><span class="line">  Parent.call(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把父的实例化对象，赋值给 child的原型对象</span></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Child)</span><br></pre></td></tr></table></figure><p>缺点：调用了两次父类构造函数, 造成了不必要的消耗</p><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><blockquote><p><strong><code>Object.create()</code></strong>方法创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong>。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">MDN</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'parent'</span></span><br><span class="line">  <span class="keyword">this</span>.play = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// call只能继承属性，不能继承方法</span></span><br><span class="line">  Parent.call(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'child'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把父的实例化对象，赋值给 child的原型对象</span></span><br><span class="line">Child.prototype = <span class="built_in">Object</span>.creat(Parent.prototype)</span><br><span class="line"><span class="comment">// 将子原型对象的构造函数指回来</span></span><br><span class="line">Child.prototype.constructor = Child</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Child)</span><br></pre></td></tr></table></figure><p>如果你希望能继承到多个对象，则可以使用混入的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     SuperClass.call(<span class="keyword">this</span>);</span><br><span class="line">     OtherSuperClass.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承一个类</span></span><br><span class="line">MyClass.prototype = <span class="built_in">Object</span>.create(SuperClass.prototype);</span><br><span class="line"><span class="comment">// 混合其它</span></span><br><span class="line"><span class="built_in">Object</span>.assign(MyClass.prototype, OtherSuperClass.prototype);</span><br><span class="line"><span class="comment">// 重新指定constructor</span></span><br><span class="line">MyClass.prototype.constructor = MyClass;</span><br><span class="line"></span><br><span class="line">MyClass.prototype.myMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// do a thing</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="ES6-class继承"><a href="#ES6-class继承" class="headerlink" title="ES6 class继承"></a>ES6 class继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.val = value</span><br><span class="line">  &#125;</span><br><span class="line">  getValue() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  extends 表明继承自哪个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">    <span class="keyword">super</span>(value)</span><br><span class="line">    <span class="keyword">this</span>.val = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> Child(<span class="number">1</span>)</span><br><span class="line">child.getValue() <span class="comment">// 1</span></span><br><span class="line">child <span class="keyword">instanceof</span> Parent <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何实现JS继承&quot;&gt;&lt;a href=&quot;#如何实现JS继承&quot; class=&quot;headerlink&quot; title=&quot;如何实现JS继承&quot;&gt;&lt;/a&gt;如何实现JS继承&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;JS是通过链式继承的，ES6的继承实际是语法糖。自己手动实现一下继承加深印象。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;es6之前是不支持接口直接继承的，所以就需要手动实现继承&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>如何使用css翻转背景图</title>
    <link href="http://yoursite.com/2021/05/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8css%E7%BF%BB%E8%BD%AC%E8%83%8C%E6%99%AF%E5%9B%BE/"/>
    <id>http://yoursite.com/2021/05/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8css%E7%BF%BB%E8%BD%AC%E8%83%8C%E6%99%AF%E5%9B%BE/</id>
    <published>2021-05-08T10:26:41.004Z</published>
    <updated>2019-12-21T12:14:18.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何使用css翻转背景图"><a href="#如何使用css翻转背景图" class="headerlink" title="如何使用css翻转背景图"></a>如何使用css翻转背景图</h1><p>在网上看的css 翻转，要么用html<img>标签，实体图，要么就是全部翻转了，</p><p>想到一个好办法，用伪元素处理背景图片</p><a id="more"></a><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    .site-info-slave</span><br><span class="line">        <span class="attribute">position</span> relative</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">1</span></span><br><span class="line">        &amp;::before</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">""</span></span><br><span class="line">            <span class="attribute">position</span>: absolute</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100%</span></span><br><span class="line">            <span class="attribute">z-index</span>: -<span class="number">1</span></span><br><span class="line">            <span class="attribute">background</span>: url(xxx) no-repeat</span><br><span class="line">            <span class="attribute">transform</span>: rotate(-<span class="number">180deg</span>)</span><br></pre></td></tr></table></figure><p>可以进行任意角度旋转父元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br></pre></td></tr></table></figure><p>就防止背景超出</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何使用css翻转背景图&quot;&gt;&lt;a href=&quot;#如何使用css翻转背景图&quot; class=&quot;headerlink&quot; title=&quot;如何使用css翻转背景图&quot;&gt;&lt;/a&gt;如何使用css翻转背景图&lt;/h1&gt;&lt;p&gt;在网上看的css 翻转，要么用html&lt;img&gt;标签，实体图，要么就是全部翻转了，&lt;/p&gt;&lt;p&gt;想到一个好办法，用伪元素处理背景图片&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>复习CSS的笔记</title>
    <link href="http://yoursite.com/2021/05/08/%E5%A4%8D%E4%B9%A0CSS%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2021/05/08/%E5%A4%8D%E4%B9%A0CSS%E7%9A%84%E7%AC%94%E8%AE%B0/</id>
    <published>2021-05-08T10:26:41.002Z</published>
    <updated>2020-01-02T12:39:13.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复习CSS的笔记"><a href="#复习CSS的笔记" class="headerlink" title="复习CSS的笔记"></a>复习CSS的笔记</h1><h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3><p><em>html</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>使用flex方法</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: deepskyblue;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* 实现元素水平居中 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="comment">/* 实现元素垂直居中 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CSS 移动外边距方法</li></ul><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/CSS_review/1571047255135.png" alt="1571047255135"></p><p>使用absolute百分比移动时，是按左上角点移动的，修正宽高的一半</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="comment">/* 下面两种方式均可 */</span></span><br><span class="line">  <span class="comment">/* margin-top: -50px;</span></span><br><span class="line"><span class="comment">  margin-left: -50px; */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到正确图形</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/CSS_review/1571047448336.png" alt="1571047448336"></p><h3 id="引用CSS方式"><a href="#引用CSS方式" class="headerlink" title="引用CSS方式"></a>引用CSS方式</h3><ul><li><strong>行内样式</strong></li></ul><p>直接对 HTML 的标记使用 style 属性，然后将 CSS 代码直接写进去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style=&quot;color: #fff; backgournd: deepskyblue;&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>内嵌式</strong></li></ul><p>将 CSS 写 <code>&lt;head&gt;</code> 与 <code>&lt;/head&gt;</code> 之间，并且用 <code>&lt;style&gt;</code> 和 <code>&lt;/style&gt;</code> 标记进行声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    p &#123;</span><br><span class="line">      color: #fff;</span><br><span class="line">      background: deepskyblue;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>链接式</strong></li></ul><p>通过将 <code>&lt;style&gt;</code> 上的 CSS 提起到指定的 CSS 文件上，然后通过 <code>&lt;link&gt;</code> 的方式在 HTML 上链接起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;link href=&quot;reset.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>导入样式</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    @import url(reset.css);</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>各种方式的优先级</strong></li></ul><p>在优先级上，<strong>行内样式</strong> &gt; <strong>链接式</strong> &gt; <strong>内嵌式</strong> &gt; <strong>@import 导入式</strong>。</p><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><ul><li>CSS 解析顺序</li></ul><p>在 CSS 的选择器中，它会按照优先级 <strong>从右向左解析</strong>，因为这样匹配元素的时候，能尽量少地查找，所以选择器最好写地简洁一点。</p><ul><li>CSS 常用选择器</li></ul><ol><li>通配符：<code>*</code></li><li>ID 选择器：<code>#ID</code></li><li>类选择器：<code>.class</code></li><li>元素选择器：<code>p</code>、<code>a</code> 等……</li><li>后代选择器：<code>p span</code>、<code>div a</code> 等……</li><li>子选择器： <code>ul&gt;li</code></li><li>伪类选择器：<code>a:hover li:nth-child</code> 等……</li><li>属性选择器：<code>input[type=&quot;text&quot;]</code> 等……</li><li>子元素选择器：<code>li:firth-child</code>、<code>p:nth-child(1)</code> 等……</li></ol><ul><li>CSS 选择器权重</li></ul><p>!important -&gt; 行内样式 -&gt; #id -&gt; .class -&gt; 元素和伪元素 -&gt; * -&gt; 继承 -&gt; 默认</p><h3 id="两列布局"><a href="#两列布局" class="headerlink" title="两列布局"></a>两列布局</h3><ul><li>优先使用flex</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body&#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: flex-end;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">        flex: 1;</span><br><span class="line">        background: green;</span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line">        background: red;</span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>自适应自适应自适应自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>固定固定固定固定固定固定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/CSS_review/1571126095796.png" alt="1571126095796"></p><ul><li>左侧浮动，右侧设置margin-left 空出左侧宽度</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">     float: left;</span><br><span class="line">     width: 200px;</span><br><span class="line">     background: green;</span><br><span class="line">     height: 200px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">margin-left</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">      background: red;</span><br><span class="line">      height: 200px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/CSS_review/1571126444923.png" alt="1571126444923"></p><h3 id="三列布局"><a href="#三列布局" class="headerlink" title="三列布局"></a>三列布局</h3><ul><li>flex版本</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body&#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        background: green;</span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">        background: red;</span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.center</span>&#123;</span></span><br><span class="line">         flex: 1;</span><br><span class="line">         background: yellow;</span><br><span class="line">         height: 200px;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>固定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>固定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>普通版同两列一样，左右浮动，中间板块margin出左右的宽度</li></ul><h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><p>margin负一下，左右两边顶上来，中间设个padding</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">   header&#123;</span><br><span class="line">       background: cadetblue;</span><br><span class="line">   &#125;</span><br><span class="line">   footer&#123;</span><br><span class="line">       background: antiquewhite;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="css">   <span class="selector-class">.center</span>&#123;</span></span><br><span class="line">       width: 100%;</span><br><span class="line">       background: coral;</span><br><span class="line">height: 200px;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="css">   <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 100%;</span><br><span class="line">        background: yellow;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.mianChild</span>&#123;</span></span><br><span class="line">        padding: 0 100px 0 200px;</span><br><span class="line">        background: yellow;</span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        margin-left: -100%;</span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        background: green;</span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        margin-left: -100px;</span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">        background: red;</span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>我是头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mianChild"</span>&gt;</span>我是中间<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>我是底部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/CSS_review/1571127881156.png" alt="1571127881156"></p><ul><li>使用flex布局跟上面一样<code>justify-content: space-between;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">   header&#123;</span><br><span class="line">       background: cadetblue;</span><br><span class="line">   &#125;</span><br><span class="line">   footer&#123;</span><br><span class="line">       background: antiquewhite;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="css">   <span class="selector-class">.center</span>&#123;</span></span><br><span class="line">       background: coral;</span><br><span class="line">height: 200px;</span><br><span class="line"><span class="css"><span class="selector-tag">display</span><span class="selector-pseudo">:flex</span>;</span></span><br><span class="line">justify-content: space-between;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="css">   <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        background: yellow;</span><br><span class="line">         flex: 1;</span><br><span class="line">         height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        background: green;</span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">        background: red;</span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>我是头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mianChild"</span>&gt;</span>我是中间<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>我是底部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="em-和-rem"><a href="#em-和-rem" class="headerlink" title="em 和 rem"></a>em 和 rem</h3><ul><li>em相对容器字体大小，容器没设置大小往父元素找</li></ul><blockquote><p>CSS继承：字体样式通常可以继承，尺寸相关样式不能继承</p></blockquote><ul><li>rem相对根元素（html元素）字体大小</li></ul><h3 id="行内元素和行内块元素"><a href="#行内元素和行内块元素" class="headerlink" title="行内元素和行内块元素"></a>行内元素和行内块元素</h3><p>都是同行显示，</p><ul><li>行内元素 <code>display:inline</code>不可设置宽高</li><li>行内块元素<code>display:inline-block</code>可以设置宽高</li></ul><h3 id="BFC-Block-Formatting-Context-块级格式化上下文"><a href="#BFC-Block-Formatting-Context-块级格式化上下文" class="headerlink" title="BFC(Block Formatting Context 块级格式化上下文)"></a>BFC(Block Formatting Context 块级格式化上下文)</h3><blockquote><p>在BFC中，每一个盒子（子元素）的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）。浮动也是如此（尽管盒子里的行盒子 Line Box 可能由于浮动而变窄）。</p></blockquote><p><strong>BFC的特征</strong></p><p>（1）所有子元素（包含浮动元素）与容器（父元素）左边对齐</p><p>（2）属于同一个BFC的父元素和子元素，相邻的父子或者兄弟间margin垂直方向会重叠，若2个元素属于不同的BFC，则垂直方向不会重叠</p><p>（3）可以自动撑开容器（若子元素是float的，父元素设置<code>overflow:hidden</code>，父元素就形成一个BFC）</p><p><strong>创建BFC</strong>，满足下列的任意一个或多个条件即可：</p><p>1、float的值不是none。（float:left 或者float:right）</p><p>2、position的值不是static或者relative。（position:absolute或者position:fixed）</p><p>3、display的值是inline-block、table-cell、flex、table-caption或者inline-flex</p><p>4、overflow的值不是visible（overflow:hidden、overflow:scroll）</p><p>5、父元素与正常文件流的子元素（非浮动子元素）自动形成一个BFC</p><h3 id="box-sizing的属性"><a href="#box-sizing的属性" class="headerlink" title="box-sizing的属性"></a>box-sizing的属性</h3><ul><li><code>content-box</code> W3C标准盒模型 设置width/height属性是指<strong>content</strong>部分</li><li><code>border-box</code> IE传统盒模型 设置width/height属性包括了<strong>content+padding+border</strong></li></ul><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/CSS_review/1571130210731.png" alt="1571130210731"></p><h3 id="CSS过渡"><a href="#CSS过渡" class="headerlink" title="CSS过渡"></a>CSS过渡</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">width</span> 1<span class="selector-tag">s</span> <span class="selector-tag">linear</span> 2<span class="selector-tag">s</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th><a href="https://www.w3school.com.cn/cssref/pr_transition-property.asp" target="_blank" rel="noopener">transition-property</a></th><th>规定应用过渡的 CSS 属性的名称。</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/cssref/pr_transition-duration.asp" target="_blank" rel="noopener">transition-duration</a></td><td>定义过渡效果花费的时间。默认是 0。</td></tr><tr><td><a href="https://www.w3school.com.cn/cssref/pr_transition-timing-function.asp" target="_blank" rel="noopener">transition-timing-function</a></td><td>规定过渡效果的时间曲线。默认是 “ease”。</td></tr><tr><td><a href="https://www.w3school.com.cn/cssref/pr_transition-delay.asp" target="_blank" rel="noopener">transition-delay</a></td><td>规定过渡效果何时开始。默认是 0。</td></tr></tbody></table><p>分别对标四个属性 解释：过渡宽度 过程一秒 匀速 延迟两米奥</p><h3 id="CSS动画"><a href="#CSS动画" class="headerlink" title="CSS动画"></a>CSS动画</h3><p><a href="https://www.runoob.com/cssref/css-animatable.html" target="_blank" rel="noopener">https://www.runoob.com/cssref/css-animatable.html</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">animation</span><span class="selector-pseudo">:myfirst</span> 5<span class="selector-tag">s</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> myfirst</span><br><span class="line">&#123;</span><br><span class="line">0%   &#123;<span class="attribute">background</span>:red;&#125;</span><br><span class="line">25%  &#123;<span class="attribute">background</span>:yellow;&#125;</span><br><span class="line">50%  &#123;<span class="attribute">background</span>:blue;&#125;</span><br><span class="line">100% &#123;<span class="attribute">background</span>:green;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@keyframes 加一个动画名， 前边百分号表示时间节点</p><h3 id="超出宽度的文字省略号"><a href="#超出宽度的文字省略号" class="headerlink" title="超出宽度的文字省略号"></a>超出宽度的文字省略号</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list-item-name</span>&#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">width</span>:X em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多少em就是多少个字</p><p><img src="/images/loading.png" data-original="https://gitee.com/JasonWu7/picture/raw/master/CSS_review/1571132042889.png" alt="1571132042889"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;复习CSS的笔记&quot;&gt;&lt;a href=&quot;#复习CSS的笔记&quot; class=&quot;headerlink&quot; title=&quot;复习CSS的笔记&quot;&gt;&lt;/a&gt;复习CSS的笔记&lt;/h1&gt;&lt;h3 id=&quot;水平垂直居中&quot;&gt;&lt;a href=&quot;#水平垂直居中&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中&quot;&gt;&lt;/a&gt;水平垂直居中&lt;/h3&gt;&lt;p&gt;&lt;em&gt;html&lt;/em&gt;&lt;/p&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;child&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端, css" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF-css/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
